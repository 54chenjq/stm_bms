
stm_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab4  08004ab4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004abc  08004abc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08004b34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004b34  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014310  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c0  00000000  00000000  000343b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00036870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  000377c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de96  00000000  00000000  00038650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e6e  00000000  00000000  000564e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9f2e  00000000  00000000  00068354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004228  00000000  00000000  001222d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800485c 	.word	0x0800485c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800485c 	.word	0x0800485c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LTC6811_wrcfg>:
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic *ic, //A two dimensional array of the configuration data that will be written
				   SPI_HandleTypeDef * hspi
                  )
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	73fb      	strb	r3, [r7, #15]
  LTC681x_wrcfg(total_ic,ic,hspi);
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f94b 	bl	80007cc <LTC681x_wrcfg>
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <LTC6811_adcv>:
void LTC6811_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH, //Cell Channels to be measured
				  SPI_HandleTypeDef * hspi
				  )
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
 800054a:	460b      	mov	r3, r1
 800054c:	71bb      	strb	r3, [r7, #6]
 800054e:	4613      	mov	r3, r2
 8000550:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH,hspi);
 8000552:	797a      	ldrb	r2, [r7, #5]
 8000554:	79b9      	ldrb	r1, [r7, #6]
 8000556:	79f8      	ldrb	r0, [r7, #7]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	f000 f9c0 	bl	80008de <LTC681x_adcv>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <LTC6811_rdcv>:
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic, // Array of the parsed cell codes
					 SPI_HandleTypeDef * hspi
                    )
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af00      	add	r7, sp, #0
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	460b      	mov	r3, r1
 8000576:	73bb      	strb	r3, [r7, #14]
  int8_t pec_error = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	75fb      	strb	r3, [r7, #23]
  pec_error = LTC681x_rdcv(reg,total_ic,ic,hspi);
 800057c:	7bb9      	ldrb	r1, [r7, #14]
 800057e:	7bf8      	ldrb	r0, [r7, #15]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	f000 f9d8 	bl	8000938 <LTC681x_rdcv>
 8000588:	4603      	mov	r3, r0
 800058a:	75fb      	strb	r3, [r7, #23]
  return(pec_error);
 800058c:	7dfb      	ldrb	r3, [r7, #23]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <LTC6811_clrcell>:
/*
The command clears the cell voltage registers and initializes all values to 1.
The register will read back hexadecimal 0xFF after the command is sent.
*/
void LTC6811_clrcell(SPI_HandleTypeDef * hspi)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
  LTC681x_clrcell(hspi);
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 fb52 	bl	8000c48 <LTC681x_clrcell>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <wakeup_sleep>:
	}
}

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	e00f      	b.n	80005dc <wakeup_sleep+0x30>
	{
	   cs_low(CS_PIN);
 80005bc:	200a      	movs	r0, #10
 80005be:	f000 fcf9 	bl	8000fb4 <cs_low>
	   delay_u(300); // Guarantees the LTC681x will be in standby ///if it doesnt work use delay_u(300)
 80005c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005c6:	f000 fd13 	bl	8000ff0 <delay_u>
	   cs_high(CS_PIN);
 80005ca:	200a      	movs	r0, #10
 80005cc:	f000 fd01 	bl	8000fd2 <cs_high>
	   delay_u(10); ///if it doesnt work use delay_u(10)
 80005d0:	200a      	movs	r0, #10
 80005d2:	f000 fd0d 	bl	8000ff0 <delay_u>
	for (int i =0; i<total_ic; i++)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbeb      	blt.n	80005bc <wakeup_sleep+0x10>
	}
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2], SPI_HandleTypeDef *hspi) //The command to be transmitted
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b084      	sub	sp, #16
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	6039      	str	r1, [r7, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	//uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	4619      	mov	r1, r3
 800060a:	2002      	movs	r0, #2
 800060c:	f000 f8aa 	bl	8000764 <pec15_calc>
 8000610:	4603      	mov	r3, r0
 8000612:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000614:	89fb      	ldrh	r3, [r7, #14]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b29b      	uxth	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800061e:	89fb      	ldrh	r3, [r7, #14]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 fcc5 	bl	8000fb4 <cs_low>
	spi_write_array(4,cmd,hspi);
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	2004      	movs	r0, #4
 8000634:	f000 fd10 	bl	8001058 <spi_write_array>
	cs_high(CS_PIN);
 8000638:	200a      	movs	r0, #10
 800063a:	f000 fcca 	bl	8000fd2 <cs_high>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <write_68>:
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[], // Payload Data
			  SPI_HandleTypeDef *hspi
			  )
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b088      	sub	sp, #32
 800064a:	af00      	add	r7, sp, #0
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4603      	mov	r3, r0
 8000654:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8000656:	2306      	movs	r3, #6
 8000658:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	b2db      	uxtb	r3, r3
 8000660:	3304      	adds	r3, #4
 8000662:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8000664:	7efb      	ldrb	r3, [r7, #27]
 8000666:	4618      	mov	r0, r3
 8000668:	f003 ffe2 	bl	8004630 <malloc>
 800066c:	4603      	mov	r3, r0
 800066e:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	781a      	ldrb	r2, [r3, #0]
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	7852      	ldrb	r2, [r2, #1]
 8000680:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8000682:	6979      	ldr	r1, [r7, #20]
 8000684:	2002      	movs	r0, #2
 8000686:	f000 f86d 	bl	8000764 <pec15_calc>
 800068a:	4603      	mov	r3, r0
 800068c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800068e:	8a7b      	ldrh	r3, [r7, #18]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	b29a      	uxth	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3302      	adds	r3, #2
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	3303      	adds	r3, #3
 80006a0:	8a7a      	ldrh	r2, [r7, #18]
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	77bb      	strb	r3, [r7, #30]
 80006ae:	e042      	b.n	8000736 <write_68+0xf0>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	777b      	strb	r3, [r7, #29]
 80006b4:	e016      	b.n	80006e4 <write_68+0x9e>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 80006b6:	7fbb      	ldrb	r3, [r7, #30]
 80006b8:	1e5a      	subs	r2, r3, #1
 80006ba:	4613      	mov	r3, r2
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	4413      	add	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	461a      	mov	r2, r3
 80006c4:	7f7b      	ldrb	r3, [r7, #29]
 80006c6:	4413      	add	r3, r2
 80006c8:	461a      	mov	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	441a      	add	r2, r3
 80006ce:	7ffb      	ldrb	r3, [r7, #31]
 80006d0:	6979      	ldr	r1, [r7, #20]
 80006d2:	440b      	add	r3, r1
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 80006d8:	7ffb      	ldrb	r3, [r7, #31]
 80006da:	3301      	adds	r3, #1
 80006dc:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80006de:	7f7b      	ldrb	r3, [r7, #29]
 80006e0:	3301      	adds	r3, #1
 80006e2:	777b      	strb	r3, [r7, #29]
 80006e4:	7f7a      	ldrb	r2, [r7, #29]
 80006e6:	7f3b      	ldrb	r3, [r7, #28]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d3e4      	bcc.n	80006b6 <write_68+0x70>
		}

		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 80006ec:	7fbb      	ldrb	r3, [r7, #30]
 80006ee:	1e5a      	subs	r2, r3, #1
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	461a      	mov	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	441a      	add	r2, r3
 80006fe:	7f3b      	ldrb	r3, [r7, #28]
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f82e 	bl	8000764 <pec15_calc>
 8000708:	4603      	mov	r3, r0
 800070a:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 800070c:	8a3b      	ldrh	r3, [r7, #16]
 800070e:	0a1b      	lsrs	r3, r3, #8
 8000710:	b299      	uxth	r1, r3
 8000712:	7ffb      	ldrb	r3, [r7, #31]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	4413      	add	r3, r2
 8000718:	b2ca      	uxtb	r2, r1
 800071a:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 800071c:	7ffb      	ldrb	r3, [r7, #31]
 800071e:	3301      	adds	r3, #1
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	4413      	add	r3, r2
 8000724:	8a3a      	ldrh	r2, [r7, #16]
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 800072a:	7ffb      	ldrb	r3, [r7, #31]
 800072c:	3302      	adds	r3, #2
 800072e:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8000730:	7fbb      	ldrb	r3, [r7, #30]
 8000732:	3b01      	subs	r3, #1
 8000734:	77bb      	strb	r3, [r7, #30]
 8000736:	7fbb      	ldrb	r3, [r7, #30]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1b9      	bne.n	80006b0 <write_68+0x6a>
	}

	cs_low(CS_PIN);
 800073c:	200a      	movs	r0, #10
 800073e:	f000 fc39 	bl	8000fb4 <cs_low>

	spi_write_array(CMD_LEN, cmd,hspi);
 8000742:	7efb      	ldrb	r3, [r7, #27]
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	6979      	ldr	r1, [r7, #20]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fc85 	bl	8001058 <spi_write_array>
	cs_high(CS_PIN);
 800074e:	200a      	movs	r0, #10
 8000750:	f000 fc3f 	bl	8000fd2 <cs_high>

	free(cmd);
 8000754:	6978      	ldr	r0, [r7, #20]
 8000756:	f003 ff73 	bl	8004640 <free>
}
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8000770:	2310      	movs	r3, #16
 8000772:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000774:	2300      	movs	r3, #0
 8000776:	737b      	strb	r3, [r7, #13]
 8000778:	e019      	b.n	80007ae <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	09db      	lsrs	r3, r3, #7
 800077e:	b29a      	uxth	r2, r3
 8000780:	7b7b      	ldrb	r3, [r7, #13]
 8000782:	6839      	ldr	r1, [r7, #0]
 8000784:	440b      	add	r3, r1
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	4053      	eors	r3, r2
 800078c:	b29b      	uxth	r3, r3
 800078e:	b2db      	uxtb	r3, r3
 8000790:	817b      	strh	r3, [r7, #10]

		remainder = (remainder<<8)^crc15Table[addr];
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	021b      	lsls	r3, r3, #8
 8000796:	b21a      	sxth	r2, r3
 8000798:	897b      	ldrh	r3, [r7, #10]
 800079a:	490b      	ldr	r1, [pc, #44]	; (80007c8 <pec15_calc+0x64>)
 800079c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	4053      	eors	r3, r2
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80007a8:	7b7b      	ldrb	r3, [r7, #13]
 80007aa:	3301      	adds	r3, #1
 80007ac:	737b      	strb	r3, [r7, #13]
 80007ae:	7b7a      	ldrb	r2, [r7, #13]
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3e1      	bcc.n	800077a <pec15_calc+0x16>

	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80007b6:	89fb      	ldrh	r3, [r7, #14]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	b29b      	uxth	r3, r3
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	08004874 	.word	0x08004874

080007cc <LTC681x_wrcfg>:
/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[],  // A two dimensional array of the configuration data that will be written
				   SPI_HandleTypeDef *hspi
                  )
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b0c7      	sub	sp, #284	; 0x11c
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80007da:	6019      	str	r1, [r3, #0]
 80007dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007ea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80007ee:	4602      	mov	r2, r0
 80007f0:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 80007f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t c_ic = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8000806:	2300      	movs	r3, #0
 8000808:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800080c:	e048      	b.n	80008a0 <LTC681x_wrcfg+0xd4>
	{
		if (ic->isospi_reverse == false)
 800080e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000812:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800081c:	f083 0301 	eor.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LTC681x_wrcfg+0x64>
		{
			c_ic = current_ic;
 8000826:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800082a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800082e:	e00b      	b.n	8000848 <LTC681x_wrcfg+0x7c>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8000830:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000834:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	3b01      	subs	r3, #1
 8000844:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		}

		for (uint8_t data = 0; data<6; data++)
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 800084e:	e01e      	b.n	800088e <LTC681x_wrcfg+0xc2>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8000850:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000854:	22e8      	movs	r2, #232	; 0xe8
 8000856:	fb02 f303 	mul.w	r3, r2, r3
 800085a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800085e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000862:	6812      	ldr	r2, [r2, #0]
 8000864:	18d1      	adds	r1, r2, r3
 8000866:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 800086a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800086e:	5c89      	ldrb	r1, [r1, r2]
 8000870:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000874:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000878:	54d1      	strb	r1, [r2, r3]
			write_count++;
 800087a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800087e:	3301      	adds	r3, #1
 8000880:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		for (uint8_t data = 0; data<6; data++)
 8000884:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8000888:	3301      	adds	r3, #1
 800088a:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 800088e:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8000892:	2b05      	cmp	r3, #5
 8000894:	d9dc      	bls.n	8000850 <LTC681x_wrcfg+0x84>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8000896:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800089a:	3301      	adds	r3, #1
 800089c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80008a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008a4:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80008a8:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d3ad      	bcc.n	800080e <LTC681x_wrcfg+0x42>
		}
	}
	write_68(total_ic, cmd, write_buffer,hspi);
 80008b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80008ba:	f107 0410 	add.w	r4, r7, #16
 80008be:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80008c2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80008c6:	f2a2 1209 	subw	r2, r2, #265	; 0x109
 80008ca:	7810      	ldrb	r0, [r2, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4622      	mov	r2, r4
 80008d0:	f7ff feb9 	bl	8000646 <write_68>
}
 80008d4:	bf00      	nop
 80008d6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd90      	pop	{r4, r7, pc}

080008de <LTC681x_adcv>:
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH, //Cell Channels to be measured
				   SPI_HandleTypeDef *hspi
                 )
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	460b      	mov	r3, r1
 80008ec:	71bb      	strb	r3, [r7, #6]
 80008ee:	4613      	mov	r3, r2
 80008f0:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	105b      	asrs	r3, r3, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	3302      	adds	r3, #2
 8000902:	b2db      	uxtb	r3, r3
 8000904:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	01db      	lsls	r3, r3, #7
 800090a:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	011b      	lsls	r3, r3, #4
 8000910:	b2da      	uxtb	r2, r3
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	4413      	add	r3, r2
 8000916:	b2da      	uxtb	r2, r3
 8000918:	797b      	ldrb	r3, [r7, #5]
 800091a:	4413      	add	r3, r2
 800091c:	b2db      	uxtb	r3, r3
 800091e:	3360      	adds	r3, #96	; 0x60
 8000920:	b2db      	uxtb	r3, r3
 8000922:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd, hspi);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	6839      	ldr	r1, [r7, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe5f 	bl	80005ee <cmd_68>
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <LTC681x_rdcv>:
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic, // Array of the parsed cell codes
					 SPI_HandleTypeDef *hspi
                    )
{
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af02      	add	r7, sp, #8
 800093e:	60ba      	str	r2, [r7, #8]
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	460b      	mov	r3, r1
 8000948:	73bb      	strb	r3, [r7, #14]
	int8_t pec_error = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	77fb      	strb	r3, [r7, #31]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	4618      	mov	r0, r3
 8000958:	f003 fe6a 	bl	8004630 <malloc>
 800095c:	4603      	mov	r3, r0
 800095e:	613b      	str	r3, [r7, #16]

	if (reg == 0)
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d14b      	bne.n	80009fe <LTC681x_rdcv+0xc6>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8000966:	2301      	movs	r3, #1
 8000968:	777b      	strb	r3, [r7, #29]
 800096a:	e041      	b.n	80009f0 <LTC681x_rdcv+0xb8>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data,hspi );
 800096c:	7bb9      	ldrb	r1, [r7, #14]
 800096e:	7f78      	ldrb	r0, [r7, #29]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	f000 f895 	bl	8000aa2 <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	e031      	b.n	80009e2 <LTC681x_rdcv+0xaa>
			{
			if (ic->isospi_reverse == false)
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8000984:	f083 0301 	eor.w	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <LTC681x_rdcv+0x5c>
			{
			  c_ic = current_ic;
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	77bb      	strb	r3, [r7, #30]
 8000992:	e006      	b.n	80009a2 <LTC681x_rdcv+0x6a>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	7bba      	ldrb	r2, [r7, #14]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	b2db      	uxtb	r3, r3
 800099e:	3b01      	subs	r3, #1
 80009a0:	77bb      	strb	r3, [r7, #30]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 80009a6:	7fbb      	ldrb	r3, [r7, #30]
 80009a8:	22e8      	movs	r2, #232	; 0xe8
 80009aa:	fb02 f303 	mul.w	r3, r2, r3
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80009b2:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 80009b6:	7fbb      	ldrb	r3, [r7, #30]
 80009b8:	22e8      	movs	r2, #232	; 0xe8
 80009ba:	fb02 f303 	mul.w	r3, r2, r3
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80009c2:	3342      	adds	r3, #66	; 0x42
 80009c4:	7f79      	ldrb	r1, [r7, #29]
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	4623      	mov	r3, r4
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	f000 f8cb 	bl	8000b66 <parse_cells>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	7ffb      	ldrb	r3, [r7, #31]
 80009d6:	4413      	add	r3, r2
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	77fb      	strb	r3, [r7, #31]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	3301      	adds	r3, #1
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	7bbb      	ldrb	r3, [r7, #14]
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	dbc9      	blt.n	800097e <LTC681x_rdcv+0x46>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 80009ea:	7f7b      	ldrb	r3, [r7, #29]
 80009ec:	3301      	adds	r3, #1
 80009ee:	777b      	strb	r3, [r7, #29]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80009f6:	7f7a      	ldrb	r2, [r7, #29]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d9b7      	bls.n	800096c <LTC681x_rdcv+0x34>
 80009fc:	e043      	b.n	8000a86 <LTC681x_rdcv+0x14e>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data,hspi);
 80009fe:	7bb9      	ldrb	r1, [r7, #14]
 8000a00:	7bf8      	ldrb	r0, [r7, #15]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	f000 f84c 	bl	8000aa2 <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	e036      	b.n	8000a7e <LTC681x_rdcv+0x146>
		{
			if (ic->isospi_reverse == false)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8000a16:	f083 0301 	eor.w	r3, r3, #1
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <LTC681x_rdcv+0xee>
			{
			c_ic = current_ic;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	77bb      	strb	r3, [r7, #30]
 8000a24:	e006      	b.n	8000a34 <LTC681x_rdcv+0xfc>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	7bba      	ldrb	r2, [r7, #14]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	3b01      	subs	r3, #1
 8000a32:	77bb      	strb	r3, [r7, #30]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	b2d8      	uxtb	r0, r3
 8000a38:	7fbb      	ldrb	r3, [r7, #30]
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 8000a42:	7fbb      	ldrb	r3, [r7, #30]
 8000a44:	22e8      	movs	r2, #232	; 0xe8
 8000a46:	fb02 f303 	mul.w	r3, r2, r3
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8000a4e:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 8000a52:	7fbb      	ldrb	r3, [r7, #30]
 8000a54:	22e8      	movs	r2, #232	; 0xe8
 8000a56:	fb02 f303 	mul.w	r3, r2, r3
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8000a5e:	3342      	adds	r3, #66	; 0x42
 8000a60:	7bf9      	ldrb	r1, [r7, #15]
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	462b      	mov	r3, r5
 8000a66:	4622      	mov	r2, r4
 8000a68:	f000 f87d 	bl	8000b66 <parse_cells>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	7ffb      	ldrb	r3, [r7, #31]
 8000a72:	4413      	add	r3, r2
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	77fb      	strb	r3, [r7, #31]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dbc4      	blt.n	8000a10 <LTC681x_rdcv+0xd8>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f8ed 	bl	8000c6c <LTC681x_check_pec>
	free(cell_data);
 8000a92:	6938      	ldr	r0, [r7, #16]
 8000a94:	f003 fdd4 	bl	8004640 <free>

	return(pec_error);
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bdb0      	pop	{r4, r5, r7, pc}

08000aa2 <LTC681x_rdcv_reg>:
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data, //An array of the unparsed cell codes
					  SPI_HandleTypeDef *hspi
                     )
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b088      	sub	sp, #32
 8000aa6:	af02      	add	r7, sp, #8
 8000aa8:	60ba      	str	r2, [r7, #8]
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	73bb      	strb	r3, [r7, #14]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d104      	bne.n	8000ac8 <LTC681x_rdcv_reg+0x26>
	{
		cmd[1] = 0x04;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	743b      	strb	r3, [r7, #16]
 8000ac6:	e026      	b.n	8000b16 <LTC681x_rdcv_reg+0x74>
	}
	else if (reg == 2) //2: RDCVB
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d104      	bne.n	8000ad8 <LTC681x_rdcv_reg+0x36>
	{
		cmd[1] = 0x06;
 8000ace:	2306      	movs	r3, #6
 8000ad0:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	743b      	strb	r3, [r7, #16]
 8000ad6:	e01e      	b.n	8000b16 <LTC681x_rdcv_reg+0x74>
	}
	else if (reg == 3) //3: RDCVC
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d104      	bne.n	8000ae8 <LTC681x_rdcv_reg+0x46>
	{
		cmd[1] = 0x08;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	743b      	strb	r3, [r7, #16]
 8000ae6:	e016      	b.n	8000b16 <LTC681x_rdcv_reg+0x74>
	}
	else if (reg == 4) //4: RDCVD
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d104      	bne.n	8000af8 <LTC681x_rdcv_reg+0x56>
	{
		cmd[1] = 0x0A;
 8000aee:	230a      	movs	r3, #10
 8000af0:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000af2:	2300      	movs	r3, #0
 8000af4:	743b      	strb	r3, [r7, #16]
 8000af6:	e00e      	b.n	8000b16 <LTC681x_rdcv_reg+0x74>
	}
	else if (reg == 5) //4: RDCVE
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	2b05      	cmp	r3, #5
 8000afc:	d104      	bne.n	8000b08 <LTC681x_rdcv_reg+0x66>
	{
		cmd[1] = 0x09;
 8000afe:	2309      	movs	r3, #9
 8000b00:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	743b      	strb	r3, [r7, #16]
 8000b06:	e006      	b.n	8000b16 <LTC681x_rdcv_reg+0x74>
	}
	else if (reg == 6) //4: RDCVF
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d103      	bne.n	8000b16 <LTC681x_rdcv_reg+0x74>
	{
		cmd[1] = 0x0B;
 8000b0e:	230b      	movs	r3, #11
 8000b10:	747b      	strb	r3, [r7, #17]
		cmd[0] = 0x00;
 8000b12:	2300      	movs	r3, #0
 8000b14:	743b      	strb	r3, [r7, #16]
	}

	cmd_pec = pec15_calc(2, cmd);
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fe21 	bl	8000764 <pec15_calc>
 8000b22:	4603      	mov	r3, r0
 8000b24:	82bb      	strh	r3, [r7, #20]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000b26:	8abb      	ldrh	r3, [r7, #20]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t)(cmd_pec);
 8000b30:	8abb      	ldrh	r3, [r7, #20]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	74fb      	strb	r3, [r7, #19]

	cs_low(CS_PIN);
 8000b36:	200a      	movs	r0, #10
 8000b38:	f000 fa3c 	bl	8000fb4 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic),hspi);
 8000b3c:	7dfa      	ldrb	r2, [r7, #23]
 8000b3e:	7bbb      	ldrb	r3, [r7, #14]
 8000b40:	fb12 f303 	smulbb	r3, r2, r3
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	f107 0010 	add.w	r0, r7, #16
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	2104      	movs	r1, #4
 8000b54:	f000 fa93 	bl	800107e <spi_write_read>
	cs_high(CS_PIN);
 8000b58:	200a      	movs	r0, #10
 8000b5a:	f000 fa3a 	bl	8000fd2 <cs_high>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <parse_cells>:
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					//SPI_HandleTypeDef *hspi
					)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b088      	sub	sp, #32
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	460b      	mov	r3, r1
 8000b76:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8000b78:	2306      	movs	r3, #6
 8000b7a:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	777b      	strb	r3, [r7, #29]
 8000b8e:	e020      	b.n	8000bd2 <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8000b90:	7fbb      	ldrb	r3, [r7, #30]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	4413      	add	r3, r2
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	7fbb      	ldrb	r3, [r7, #30]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	68b9      	ldr	r1, [r7, #8]
 8000ba0:	440b      	add	r3, r1
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8000bae:	7f7a      	ldrb	r2, [r7, #29]
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	7ef9      	ldrb	r1, [r7, #27]
 8000bb6:	fb01 f303 	mul.w	r3, r1, r3
 8000bba:	4413      	add	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	8aba      	ldrh	r2, [r7, #20]
 8000bc4:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 8000bc6:	7fbb      	ldrb	r3, [r7, #30]
 8000bc8:	3302      	adds	r3, #2
 8000bca:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8000bcc:	7f7b      	ldrb	r3, [r7, #29]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	777b      	strb	r3, [r7, #29]
 8000bd2:	7f7a      	ldrb	r2, [r7, #29]
 8000bd4:	7efb      	ldrb	r3, [r7, #27]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d3da      	bcc.n	8000b90 <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8000bda:	7fbb      	ldrb	r3, [r7, #30]
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	7fbb      	ldrb	r3, [r7, #30]
 8000be8:	3301      	adds	r3, #1
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	440b      	add	r3, r1
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	441a      	add	r2, r3
 8000c02:	7f3b      	ldrb	r3, [r7, #28]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fdac 	bl	8000764 <pec15_calc>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 8000c10:	8b3a      	ldrh	r2, [r7, #24]
 8000c12:	8afb      	ldrh	r3, [r7, #22]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d008      	beq.n	8000c2a <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8000c18:	2301      	movs	r3, #1
 8000c1a:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8000c1c:	7bbb      	ldrb	r3, [r7, #14]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c22:	4413      	add	r3, r2
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	e005      	b.n	8000c36 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c30:	4413      	add	r3, r2
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8000c36:	7fbb      	ldrb	r3, [r7, #30]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 8000c3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <LTC681x_clrcell>:
The command clears the cell voltage registers and initializes
all values to 1. The register will read back hexadecimal 0xFF
after the command is sent.
*/
void LTC681x_clrcell(SPI_HandleTypeDef *hspi)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2]= {0x07 , 0x11};
 8000c50:	f241 1307 	movw	r3, #4359	; 0x1107
 8000c54:	81bb      	strh	r3, [r7, #12]
	cmd_68(cmd,hspi);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fcc6 	bl	80005ee <cmd_68>
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b08b      	sub	sp, #44	; 0x2c
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	603a      	str	r2, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	f200 8191 	bhi.w	8000fa6 <LTC681x_check_pec+0x33a>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <LTC681x_check_pec+0x20>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000ca1 	.word	0x08000ca1
 8000c90:	08000d9d 	.word	0x08000d9d
 8000c94:	08000e4f 	.word	0x08000e4f
 8000c98:	08000efb 	.word	0x08000efb
 8000c9c:	08000d1f 	.word	0x08000d1f
	{
		case CFGR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca4:	e036      	b.n	8000d14 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	22e8      	movs	r2, #232	; 0xe8
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	22e8      	movs	r2, #232	; 0xe8
 8000cba:	fb02 f303 	mul.w	r3, r2, r3
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	7b9b      	ldrb	r3, [r3, #14]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	20e8      	movs	r0, #232	; 0xe8
 8000cca:	fb00 f303 	mul.w	r3, r0, r3
 8000cce:	6838      	ldr	r0, [r7, #0]
 8000cd0:	4403      	add	r3, r0
 8000cd2:	440a      	add	r2, r1
 8000cd4:	b292      	uxth	r2, r2
 8000cd6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	22e8      	movs	r2, #232	; 0xe8
 8000cde:	fb02 f303 	mul.w	r3, r2, r3
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	22e8      	movs	r2, #232	; 0xe8
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	7b9b      	ldrb	r3, [r3, #14]
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	20e8      	movs	r0, #232	; 0xe8
 8000cfe:	fb00 f303 	mul.w	r3, r0, r3
 8000d02:	6838      	ldr	r0, [r7, #0]
 8000d04:	4403      	add	r3, r0
 8000d06:	440a      	add	r2, r1
 8000d08:	b292      	uxth	r2, r2
 8000d0a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	3301      	adds	r3, #1
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbc4      	blt.n	8000ca6 <LTC681x_check_pec+0x3a>
		  }
		break;
 8000d1c:	e144      	b.n	8000fa8 <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
 8000d22:	e036      	b.n	8000d92 <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8000d24:	6a3b      	ldr	r3, [r7, #32]
 8000d26:	22e8      	movs	r2, #232	; 0xe8
 8000d28:	fb02 f303 	mul.w	r3, r2, r3
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	22e8      	movs	r2, #232	; 0xe8
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	7f5b      	ldrb	r3, [r3, #29]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	20e8      	movs	r0, #232	; 0xe8
 8000d48:	fb00 f303 	mul.w	r3, r0, r3
 8000d4c:	6838      	ldr	r0, [r7, #0]
 8000d4e:	4403      	add	r3, r0
 8000d50:	440a      	add	r2, r1
 8000d52:	b292      	uxth	r2, r2
 8000d54:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	22e8      	movs	r2, #232	; 0xe8
 8000d5c:	fb02 f303 	mul.w	r3, r2, r3
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	22e8      	movs	r2, #232	; 0xe8
 8000d6c:	fb02 f303 	mul.w	r3, r2, r3
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	7f5b      	ldrb	r3, [r3, #29]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	20e8      	movs	r0, #232	; 0xe8
 8000d7c:	fb00 f303 	mul.w	r3, r0, r3
 8000d80:	6838      	ldr	r0, [r7, #0]
 8000d82:	4403      	add	r3, r0
 8000d84:	440a      	add	r2, r1
 8000d86:	b292      	uxth	r2, r2
 8000d88:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	623b      	str	r3, [r7, #32]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	6a3a      	ldr	r2, [r7, #32]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	dbc4      	blt.n	8000d24 <LTC681x_check_pec+0xb8>
		  }
		break;
 8000d9a:	e105      	b.n	8000fa8 <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
 8000da0:	e050      	b.n	8000e44 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	e043      	b.n	8000e30 <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	22e8      	movs	r2, #232	; 0xe8
 8000dac:	fb02 f303 	mul.w	r3, r2, r3
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	22e8      	movs	r2, #232	; 0xe8
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	441a      	add	r2, r3
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	3342      	adds	r3, #66	; 0x42
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	20e8      	movs	r0, #232	; 0xe8
 8000dd2:	fb00 f303 	mul.w	r3, r0, r3
 8000dd6:	6838      	ldr	r0, [r7, #0]
 8000dd8:	4403      	add	r3, r0
 8000dda:	440a      	add	r2, r1
 8000ddc:	b292      	uxth	r2, r2
 8000dde:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	22e8      	movs	r2, #232	; 0xe8
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	441a      	add	r2, r3
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	3360      	adds	r3, #96	; 0x60
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	8899      	ldrh	r1, [r3, #4]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	22e8      	movs	r2, #232	; 0xe8
 8000dfc:	fb02 f303 	mul.w	r3, r2, r3
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	441a      	add	r2, r3
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	4413      	add	r3, r2
 8000e08:	3342      	adds	r3, #66	; 0x42
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	20e8      	movs	r0, #232	; 0xe8
 8000e12:	fb00 f202 	mul.w	r2, r0, r2
 8000e16:	6838      	ldr	r0, [r7, #0]
 8000e18:	4402      	add	r2, r0
 8000e1a:	440b      	add	r3, r1
 8000e1c:	b299      	uxth	r1, r3
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	3360      	adds	r3, #96	; 0x60
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	460a      	mov	r2, r1
 8000e28:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8000e36:	461a      	mov	r2, r3
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	dbb4      	blt.n	8000da8 <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3301      	adds	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	dbaa      	blt.n	8000da2 <LTC681x_check_pec+0x136>
			}
		  }
		break;
 8000e4c:	e0ac      	b.n	8000fa8 <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	e04d      	b.n	8000ef0 <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	e040      	b.n	8000edc <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	22e8      	movs	r2, #232	; 0xe8
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	22e8      	movs	r2, #232	; 0xe8
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	441a      	add	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4413      	add	r3, r2
 8000e7a:	335a      	adds	r3, #90	; 0x5a
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	20e8      	movs	r0, #232	; 0xe8
 8000e84:	fb00 f303 	mul.w	r3, r0, r3
 8000e88:	6838      	ldr	r0, [r7, #0]
 8000e8a:	4403      	add	r3, r0
 8000e8c:	440a      	add	r2, r1
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	22e8      	movs	r2, #232	; 0xe8
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	3268      	adds	r2, #104	; 0x68
 8000ea4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	22e8      	movs	r2, #232	; 0xe8
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	441a      	add	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	335a      	adds	r3, #90	; 0x5a
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	20e8      	movs	r0, #232	; 0xe8
 8000ec2:	fb00 f303 	mul.w	r3, r0, r3
 8000ec6:	6838      	ldr	r0, [r7, #0]
 8000ec8:	4403      	add	r3, r0
 8000eca:	440a      	add	r2, r1
 8000ecc:	b291      	uxth	r1, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	3268      	adds	r2, #104	; 0x68
 8000ed2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	dbb7      	blt.n	8000e5a <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbad      	blt.n	8000e54 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 8000ef8:	e056      	b.n	8000fa8 <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	e04d      	b.n	8000f9c <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	e040      	b.n	8000f88 <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	22e8      	movs	r2, #232	; 0xe8
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	22e8      	movs	r2, #232	; 0xe8
 8000f1a:	fb02 f303 	mul.w	r3, r2, r3
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	441a      	add	r2, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	4413      	add	r3, r2
 8000f26:	336b      	adds	r3, #107	; 0x6b
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	20e8      	movs	r0, #232	; 0xe8
 8000f30:	fb00 f303 	mul.w	r3, r0, r3
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	4403      	add	r3, r0
 8000f38:	440a      	add	r2, r1
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	22e8      	movs	r2, #232	; 0xe8
 8000f44:	fb02 f303 	mul.w	r3, r2, r3
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	326c      	adds	r2, #108	; 0x6c
 8000f50:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	22e8      	movs	r2, #232	; 0xe8
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	441a      	add	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4413      	add	r3, r2
 8000f64:	336b      	adds	r3, #107	; 0x6b
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	20e8      	movs	r0, #232	; 0xe8
 8000f6e:	fb00 f303 	mul.w	r3, r0, r3
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	4403      	add	r3, r0
 8000f76:	440a      	add	r2, r1
 8000f78:	b291      	uxth	r1, r2
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	326c      	adds	r2, #108	; 0x6c
 8000f7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	dbb7      	blt.n	8000f06 <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbad      	blt.n	8000f00 <LTC681x_check_pec+0x294>
			}
		  }
		break;
 8000fa4:	e000      	b.n	8000fa8 <LTC681x_check_pec+0x33c>
		default:
		break;
 8000fa6:	bf00      	nop
	}
}
 8000fa8:	bf00      	nop
 8000faa:	372c      	adds	r7, #44	; 0x2c
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <cs_low>:
#include "stm32g4xx.h"
#include <stdio.h>



void cs_low(uint8_t pin){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f000 fe3d 	bl	8001c44 <HAL_GPIO_WritePin>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <cs_high>:

void cs_high(uint8_t pin)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe4:	f000 fe2e 	bl	8001c44 <HAL_GPIO_WritePin>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <delay_u>:

///////////////////////////////////
// library https://github.com/keatis/dwt_delay/
void delay_u(uint32_t microseconds)// microseconds
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <delay_u+0x58>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4a12      	ldr	r2, [pc, #72]	; (8001048 <delay_u+0x58>)
 8000ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001002:	60d3      	str	r3, [r2, #12]
	    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <delay_u+0x5c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a10      	ldr	r2, [pc, #64]	; (800104c <delay_u+0x5c>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6013      	str	r3, [r2, #0]
	    // Get the current number of clock cycles
	    uint32_t const startTicks = DWT->CYCCNT;
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <delay_u+0x5c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	60fb      	str	r3, [r7, #12]
	    // Calculate the number of clock cycles for the desired delay
	    uint32_t const delayTicks = (SystemCoreClock / 1000000) * microseconds;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <delay_u+0x60>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <delay_u+0x64>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	0c9a      	lsrs	r2, r3, #18
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	fb02 f303 	mul.w	r3, r2, r3
 8001028:	60bb      	str	r3, [r7, #8]
	    // Wait until the number of clock cycles has elapsed
	    while (DWT->CYCCNT - startTicks < delayTicks);
 800102a:	bf00      	nop
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <delay_u+0x5c>)
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	429a      	cmp	r2, r3
 8001038:	d8f8      	bhi.n	800102c <delay_u+0x3c>
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000edf0 	.word	0xe000edf0
 800104c:	e0001000 	.word	0xe0001000
 8001050:	20000000 	.word	0x20000000
 8001054:	431bde83 	.word	0x431bde83

08001058 <spi_write_array>:
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[], //Array of bytes to be written on the SPI port
					SPI_HandleTypeDef *hspi
					)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, data,len,1000); // might be changed in future
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	b29a      	uxth	r2, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f001 fe72 	bl	8002d5a <HAL_SPI_Transmit>

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
        uint8_t tx_len, //length of the tx data arry
        uint8_t *rx_data,//Input: array that will store the data read by the SPI port
        uint8_t rx_len ,//Option: number of bytes to be read from the SPI port
		SPI_HandleTypeDef * hspi //spi reference
       ){
 800107e:	b580      	push	{r7, lr}
 8001080:	b084      	sub	sp, #16
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	461a      	mov	r2, r3
 800108a:	460b      	mov	r3, r1
 800108c:	72fb      	strb	r3, [r7, #11]
 800108e:	4613      	mov	r3, r2
 8001090:	72bb      	strb	r3, [r7, #10]


	HAL_SPI_Transmit(hspi, tx_Data, tx_len, 1000);
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	b29a      	uxth	r2, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	69b8      	ldr	r0, [r7, #24]
 800109e:	f001 fe5c 	bl	8002d5a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, rx_data, rx_len, 1000);
 80010a2:	7abb      	ldrb	r3, [r7, #10]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	69b8      	ldr	r0, [r7, #24]
 80010ae:	f001 ffc2 	bl	8003036 <HAL_SPI_Receive>

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c2:	f000 fac6 	bl	8001652 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c6:	f000 f839 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ca:	f000 f90d 	bl	80012e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ce:	f000 f8bf 	bl	8001250 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80010d2:	f000 f87f 	bl	80011d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  cell_asic *c_a = (cell_asic *)malloc(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f003 faaa 	bl	8004630 <malloc>
 80010dc:	4603      	mov	r3, r0
 80010de:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  pec = 2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	70fb      	strb	r3, [r7, #3]
	  wakeup_sleep(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fa61 	bl	80005ac <wakeup_sleep>
	  LTC6811_wrcfg(1, c_a, &hspi1);
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <main+0x7c>)
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff fa14 	bl	800051c <LTC6811_wrcfg>

	  LTC6811_adcv(2, 0, 0, &hspi1);
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <main+0x7c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff fa1f 	bl	800053e <LTC6811_adcv>
	  HAL_Delay(4000);
 8001100:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001104:	f000 fb16 	bl	8001734 <HAL_Delay>
	  pec=LTC6811_rdcv(0, 1, c_a, &hspi1);
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <main+0x7c>)
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	2101      	movs	r1, #1
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fa29 	bl	8000566 <LTC6811_rdcv>
 8001114:	4603      	mov	r3, r0
 8001116:	70fb      	strb	r3, [r7, #3]
	  LTC6811_clrcell(&hspi1);
 8001118:	4807      	ldr	r0, [pc, #28]	; (8001138 <main+0x7c>)
 800111a:	f7ff fa3c 	bl	8000596 <LTC6811_clrcell>
	  pec=LTC6811_rdcv(0, 1, c_a, &hspi1);
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <main+0x7c>)
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	2101      	movs	r1, #1
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff fa1e 	bl	8000566 <LTC6811_rdcv>
 800112a:	4603      	mov	r3, r0
 800112c:	70fb      	strb	r3, [r7, #3]

	  HAL_Delay(1000);
 800112e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001132:	f000 faff 	bl	8001734 <HAL_Delay>
	  pec = 2;
 8001136:	e7d3      	b.n	80010e0 <main+0x24>
 8001138:	2000008c 	.word	0x2000008c

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	; 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	2238      	movs	r2, #56	; 0x38
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fa80 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 fd88 	bl	8001c74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001176:	2302      	movs	r3, #2
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800117a:	2304      	movs	r3, #4
 800117c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800117e:	2355      	movs	r3, #85	; 0x55
 8001180:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001182:	2302      	movs	r3, #2
 8001184:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001186:	2302      	movs	r3, #2
 8001188:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fe12 	bl	8001dbc <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800119e:	f000 f8f9 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	2303      	movs	r3, #3
 80011a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2104      	movs	r1, #4
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 f916 	bl	80023ec <HAL_RCC_ClockConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011c6:	f000 f8e5 	bl	8001394 <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3750      	adds	r7, #80	; 0x50
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_SPI1_Init+0x74>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <MX_SPI1_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_SPI1_Init+0x74>)
 80011e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_SPI1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_SPI1_Init+0x74>)
 80011ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_SPI1_Init+0x74>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_SPI1_Init+0x74>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_SPI1_Init+0x74>)
 8001202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001206:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_SPI1_Init+0x74>)
 800120a:	2238      	movs	r2, #56	; 0x38
 800120c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_SPI1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_SPI1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_SPI1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_SPI1_Init+0x74>)
 8001222:	2207      	movs	r2, #7
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_SPI1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_SPI1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_SPI1_Init+0x74>)
 8001234:	f001 fce6 	bl	8002c04 <HAL_SPI_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800123e:	f000 f8a9 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000008c 	.word	0x2000008c
 800124c:	40013000 	.word	0x40013000

08001250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001256:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <MX_USART2_UART_Init+0x94>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001298:	4811      	ldr	r0, [pc, #68]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800129a:	f002 fbcb 	bl	8003a34 <HAL_UART_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012a4:	f000 f876 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 80012ac:	f003 f8cc 	bl	8004448 <HAL_UARTEx_SetTxFifoThreshold>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012b6:	f000 f86d 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 80012be:	f003 f901 	bl	80044c4 <HAL_UARTEx_SetRxFifoThreshold>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012c8:	f000 f864 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 80012ce:	f003 f882 	bl	80043d6 <HAL_UARTEx_DisableFifoMode>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012d8:	f000 f85c 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000f0 	.word	0x200000f0
 80012e4:	40004400 	.word	0x40004400

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <MX_GPIO_Init+0xa4>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a22      	ldr	r2, [pc, #136]	; (800138c <MX_GPIO_Init+0xa4>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <MX_GPIO_Init+0xa4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_GPIO_Init+0xa4>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <MX_GPIO_Init+0xa4>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_GPIO_Init+0xa4>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2110      	movs	r1, #16
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f000 fc85 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001340:	4813      	ldr	r0, [pc, #76]	; (8001390 <MX_GPIO_Init+0xa8>)
 8001342:	f000 fc7f 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001346:	2310      	movs	r3, #16
 8001348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f000 faee 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4619      	mov	r1, r3
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_GPIO_Init+0xa8>)
 800137e:	f000 fadf 	bl	8001940 <HAL_GPIO_Init>

}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	48000400 	.word	0x48000400

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>
	...

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_MspInit+0x44>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_MspInit+0x44>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6613      	str	r3, [r2, #96]	; 0x60
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_MspInit+0x44>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_MspInit+0x44>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x44>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x44>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_SPI_MspInit+0x7c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d128      	bne.n	800145c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_SPI_MspInit+0x80>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_SPI_MspInit+0x80>)
 8001410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001414:	6613      	str	r3, [r2, #96]	; 0x60
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_SPI_MspInit+0x80>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_SPI_MspInit+0x80>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_SPI_MspInit+0x80>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_SPI_MspInit+0x80>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800143a:	23e0      	movs	r3, #224	; 0xe0
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144a:	2305      	movs	r3, #5
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001458:	f000 fa72 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40013000 	.word	0x40013000
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b09a      	sub	sp, #104	; 0x68
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	2244      	movs	r2, #68	; 0x44
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f003 f8df 	bl	8004650 <memset>
  if(huart->Instance==USART2)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <HAL_UART_MspInit+0xa8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d136      	bne.n	800150a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800149c:	2302      	movs	r3, #2
 800149e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 f9bb 	bl	8002824 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014b4:	f7ff ff6e 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_UART_MspInit+0xac>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	4a16      	ldr	r2, [pc, #88]	; (8001518 <HAL_UART_MspInit+0xac>)
 80014be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c2:	6593      	str	r3, [r2, #88]	; 0x58
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_UART_MspInit+0xac>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_UART_MspInit+0xac>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	4a10      	ldr	r2, [pc, #64]	; (8001518 <HAL_UART_MspInit+0xac>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_UART_MspInit+0xac>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80014e8:	230c      	movs	r3, #12
 80014ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f8:	2307      	movs	r3, #7
 80014fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001500:	4619      	mov	r1, r3
 8001502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001506:	f000 fa1b 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3768      	adds	r7, #104	; 0x68
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40004400 	.word	0x40004400
 8001518:	40021000 	.word	0x40021000

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <NMI_Handler+0x4>

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <MemManage_Handler+0x4>

0800152e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler+0x4>

0800153a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f000 f8c6 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f003 f81c 	bl	80045dc <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20008000 	.word	0x20008000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	20000180 	.word	0x20000180
 80015d8:	20000198 	.word	0x20000198

080015dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001602:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <LoopForever+0x6>)
  ldr r1, =_edata
 8001606:	490e      	ldr	r1, [pc, #56]	; (8001640 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001608:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <LoopForever+0xe>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <LoopForever+0x12>)
  ldr r4, =_ebss
 800161c:	4c0b      	ldr	r4, [pc, #44]	; (800164c <LoopForever+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800162a:	f7ff ffd7 	bl	80015dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162e:	f002 ffdb 	bl	80045e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001632:	f7ff fd43 	bl	80010bc <main>

08001636 <LoopForever>:

LoopForever:
    b LoopForever
 8001636:	e7fe      	b.n	8001636 <LoopForever>
  ldr   r0, =_estack
 8001638:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001644:	08004ac4 	.word	0x08004ac4
  ldr r2, =_sbss
 8001648:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800164c:	20000198 	.word	0x20000198

08001650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC1_2_IRQHandler>

08001652 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f93d 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001662:	2000      	movs	r0, #0
 8001664:	f000 f80e 	bl	8001684 <HAL_InitTick>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	e001      	b.n	8001678 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001674:	f7ff fe94 	bl	80013a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001678:	79fb      	ldrb	r3, [r7, #7]

}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_InitTick+0x68>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d022      	beq.n	80016de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_InitTick+0x6c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_InitTick+0x68>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f93a 	bl	8001926 <HAL_SYSTICK_Config>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10f      	bne.n	80016d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b0f      	cmp	r3, #15
 80016bc:	d809      	bhi.n	80016d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016be:	2200      	movs	r2, #0
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	f04f 30ff 	mov.w	r0, #4294967295
 80016c6:	f000 f914 	bl	80018f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_InitTick+0x70>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e007      	b.n	80016e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	e004      	b.n	80016e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e001      	b.n	80016e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_IncTick+0x1c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_IncTick+0x20>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4413      	add	r3, r2
 8001706:	4a03      	ldr	r2, [pc, #12]	; (8001714 <HAL_IncTick+0x1c>)
 8001708:	6013      	str	r3, [r2, #0]
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	20000184 	.word	0x20000184
 8001718:	20000008 	.word	0x20000008

0800171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000184 	.word	0x20000184

08001734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff ffee 	bl	800171c <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d004      	beq.n	8001758 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_Delay+0x40>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001758:	bf00      	nop
 800175a:	f7ff ffdf 	bl	800171c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	429a      	cmp	r2, r3
 8001768:	d8f7      	bhi.n	800175a <HAL_Delay+0x26>
  {
  }
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000008 	.word	0x20000008

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff8e 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff47 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001900:	f7ff ff5e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	6978      	ldr	r0, [r7, #20]
 800190c:	f7ff ff90 	bl	8001830 <NVIC_EncodePriority>
 8001910:	4602      	mov	r2, r0
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff5f 	bl	80017dc <__NVIC_SetPriority>
}
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffb2 	bl	8001898 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800194e:	e15a      	b.n	8001c06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 814c 	beq.w	8001c00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d005      	beq.n	8001980 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800197c:	2b02      	cmp	r3, #2
 800197e:	d130      	bne.n	80019e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019b6:	2201      	movs	r2, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 0201 	and.w	r2, r3, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d017      	beq.n	8001a1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d123      	bne.n	8001a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	6939      	ldr	r1, [r7, #16]
 8001a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0203 	and.w	r2, r3, #3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80a6 	beq.w	8001c00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_GPIO_Init+0x2e4>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab8:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_GPIO_Init+0x2e4>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac0:	4b58      	ldr	r3, [pc, #352]	; (8001c24 <HAL_GPIO_Init+0x2e4>)
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001acc:	4a56      	ldr	r2, [pc, #344]	; (8001c28 <HAL_GPIO_Init+0x2e8>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001af6:	d01f      	beq.n	8001b38 <HAL_GPIO_Init+0x1f8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4c      	ldr	r2, [pc, #304]	; (8001c2c <HAL_GPIO_Init+0x2ec>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d019      	beq.n	8001b34 <HAL_GPIO_Init+0x1f4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4b      	ldr	r2, [pc, #300]	; (8001c30 <HAL_GPIO_Init+0x2f0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_GPIO_Init+0x1f0>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4a      	ldr	r2, [pc, #296]	; (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1ec>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a49      	ldr	r2, [pc, #292]	; (8001c38 <HAL_GPIO_Init+0x2f8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1e8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a48      	ldr	r2, [pc, #288]	; (8001c3c <HAL_GPIO_Init+0x2fc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1e4>
 8001b20:	2305      	movs	r3, #5
 8001b22:	e00a      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b24:	2306      	movs	r3, #6
 8001b26:	e008      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b28:	2304      	movs	r3, #4
 8001b2a:	e006      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e004      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e002      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	f002 0203 	and.w	r2, r2, #3
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	4093      	lsls	r3, r2
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b4a:	4937      	ldr	r1, [pc, #220]	; (8001c28 <HAL_GPIO_Init+0x2e8>)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b58:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b7c:	4a30      	ldr	r2, [pc, #192]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b82:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ba6:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bfa:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f47f ae9d 	bne.w	8001950 <HAL_GPIO_Init+0x10>
  }
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	48000400 	.word	0x48000400
 8001c30:	48000800 	.word	0x48000800
 8001c34:	48000c00 	.word	0x48000c00
 8001c38:	48001000 	.word	0x48001000
 8001c3c:	48001400 	.word	0x48001400
 8001c40:	40010400 	.word	0x40010400

08001c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c60:	e002      	b.n	8001c68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d141      	bne.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c82:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8e:	d131      	bne.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c90:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c96:	4a46      	ldr	r2, [pc, #280]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca8:	4a41      	ldr	r2, [pc, #260]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cb0:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2232      	movs	r2, #50	; 0x32
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	4a3f      	ldr	r2, [pc, #252]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	0c9b      	lsrs	r3, r3, #18
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc6:	e002      	b.n	8001cce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cce:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cda:	d102      	bne.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f2      	bne.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ce2:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d158      	bne.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e057      	b.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cfa:	4a2d      	ldr	r2, [pc, #180]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d04:	e04d      	b.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0c:	d141      	bne.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1a:	d131      	bne.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d22:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d34:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2232      	movs	r2, #50	; 0x32
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	0c9b      	lsrs	r3, r3, #18
 8001d4e:	3301      	adds	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d52:	e002      	b.n	8001d5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d66:	d102      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f2      	bne.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7a:	d112      	bne.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e011      	b.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d90:	e007      	b.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40007000 	.word	0x40007000
 8001db4:	20000000 	.word	0x20000000
 8001db8:	431bde83 	.word	0x431bde83

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e306      	b.n	80023dc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d075      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dda:	4b97      	ldr	r3, [pc, #604]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de4:	4b94      	ldr	r3, [pc, #592]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3e>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_OscConfig+0x44>
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	4b8d      	ldr	r3, [pc, #564]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d05b      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x108>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d157      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e2e1      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d106      	bne.n	8001e30 <HAL_RCC_OscConfig+0x74>
 8001e22:	4b85      	ldr	r3, [pc, #532]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a84      	ldr	r2, [pc, #528]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e01d      	b.n	8001e6c <HAL_RCC_OscConfig+0xb0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x98>
 8001e3a:	4b7f      	ldr	r3, [pc, #508]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a7e      	ldr	r2, [pc, #504]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7b      	ldr	r2, [pc, #492]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0xb0>
 8001e54:	4b78      	ldr	r3, [pc, #480]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a77      	ldr	r2, [pc, #476]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b75      	ldr	r3, [pc, #468]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a74      	ldr	r2, [pc, #464]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d013      	beq.n	8001e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff fc52 	bl	800171c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7ff fc4e 	bl	800171c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e2a6      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8e:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0xc0>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fc3e 	bl	800171c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fc3a 	bl	800171c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e292      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eb6:	4b60      	ldr	r3, [pc, #384]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xe8>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d075      	beq.n	8001fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed2:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001edc:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b0c      	cmp	r3, #12
 8001eea:	d102      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x136>
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d002      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x13c>
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d11f      	bne.n	8001f38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef8:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_OscConfig+0x154>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e265      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b49      	ldr	r3, [pc, #292]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	4946      	ldr	r1, [pc, #280]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f24:	4b45      	ldr	r3, [pc, #276]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fbab 	bl	8001684 <HAL_InitTick>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d043      	beq.n	8001fbc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e251      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d023      	beq.n	8001f88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f40:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a3c      	ldr	r2, [pc, #240]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fbe6 	bl	800171c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f54:	f7ff fbe2 	bl	800171c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e23a      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f66:	4b34      	ldr	r3, [pc, #208]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	061b      	lsls	r3, r3, #24
 8001f80:	492d      	ldr	r1, [pc, #180]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
 8001f86:	e01a      	b.n	8001fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff fbc2 	bl	800171c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fbbe 	bl	800171c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e216      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x1e0>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d041      	beq.n	800204e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01c      	beq.n	800200c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd8:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fb9b 	bl	800171c <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff fb97 	bl	800171c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1ef      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0ef      	beq.n	8001fea <HAL_RCC_OscConfig+0x22e>
 800200a:	e020      	b.n	800204e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 800200e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7ff fb7e 	bl	800171c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002022:	e00d      	b.n	8002040 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff fb7a 	bl	800171c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d906      	bls.n	8002040 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1d2      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002040:	4b8c      	ldr	r3, [pc, #560]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 8002042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ea      	bne.n	8002024 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80a6 	beq.w	80021a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002060:	4b84      	ldr	r3, [pc, #528]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x2b4>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x2b6>
 8002070:	2300      	movs	r3, #0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00d      	beq.n	8002092 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b7f      	ldr	r3, [pc, #508]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	4a7e      	ldr	r2, [pc, #504]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	6593      	str	r3, [r2, #88]	; 0x58
 8002082:	4b7c      	ldr	r3, [pc, #496]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002092:	4b79      	ldr	r3, [pc, #484]	; (8002278 <HAL_RCC_OscConfig+0x4bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_RCC_OscConfig+0x4bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a75      	ldr	r2, [pc, #468]	; (8002278 <HAL_RCC_OscConfig+0x4bc>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7ff fb37 	bl	800171c <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7ff fb33 	bl	800171c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e18b      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c4:	4b6c      	ldr	r3, [pc, #432]	; (8002278 <HAL_RCC_OscConfig+0x4bc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d108      	bne.n	80020ea <HAL_RCC_OscConfig+0x32e>
 80020d8:	4b66      	ldr	r3, [pc, #408]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	4a65      	ldr	r2, [pc, #404]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e8:	e024      	b.n	8002134 <HAL_RCC_OscConfig+0x378>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d110      	bne.n	8002114 <HAL_RCC_OscConfig+0x358>
 80020f2:	4b60      	ldr	r3, [pc, #384]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f8:	4a5e      	ldr	r2, [pc, #376]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002102:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	4a5a      	ldr	r2, [pc, #360]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002112:	e00f      	b.n	8002134 <HAL_RCC_OscConfig+0x378>
 8002114:	4b57      	ldr	r3, [pc, #348]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	4a56      	ldr	r2, [pc, #344]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002124:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	4a52      	ldr	r2, [pc, #328]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d016      	beq.n	800216a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7ff faee 	bl	800171c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7ff faea 	bl	800171c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e140      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ed      	beq.n	8002144 <HAL_RCC_OscConfig+0x388>
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7ff fad7 	bl	800171c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff fad3 	bl	800171c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e129      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002188:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ed      	bne.n	8002172 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002196:	7ffb      	ldrb	r3, [r7, #31]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219c:	4b35      	ldr	r3, [pc, #212]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	4a34      	ldr	r2, [pc, #208]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 80021a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d03c      	beq.n	800222e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 80021be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c2:	4a2c      	ldr	r2, [pc, #176]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff faa6 	bl	800171c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021d4:	f7ff faa2 	bl	800171c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0fa      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 80021e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ef      	beq.n	80021d4 <HAL_RCC_OscConfig+0x418>
 80021f4:	e01b      	b.n	800222e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021f6:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 80021f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021fc:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7ff fa89 	bl	800171c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800220e:	f7ff fa85 	bl	800171c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0dd      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 8002222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ef      	bne.n	800220e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80d1 	beq.w	80023da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b0c      	cmp	r3, #12
 8002242:	f000 808b 	beq.w	800235c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d15e      	bne.n	800230c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <HAL_RCC_OscConfig+0x4b8>)
 8002254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff fa5f 	bl	800171c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	e00c      	b.n	800227c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff fa5b 	bl	800171c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d905      	bls.n	800227c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0b3      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
 8002274:	40021000 	.word	0x40021000
 8002278:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ec      	bne.n	8002262 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002288:	4b56      	ldr	r3, [pc, #344]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_RCC_OscConfig+0x62c>)
 800228e:	4013      	ands	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6a11      	ldr	r1, [r2, #32]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002298:	3a01      	subs	r2, #1
 800229a:	0112      	lsls	r2, r2, #4
 800229c:	4311      	orrs	r1, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80022a2:	0212      	lsls	r2, r2, #8
 80022a4:	4311      	orrs	r1, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022aa:	0852      	lsrs	r2, r2, #1
 80022ac:	3a01      	subs	r2, #1
 80022ae:	0552      	lsls	r2, r2, #21
 80022b0:	4311      	orrs	r1, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022b6:	0852      	lsrs	r2, r2, #1
 80022b8:	3a01      	subs	r2, #1
 80022ba:	0652      	lsls	r2, r2, #25
 80022bc:	4311      	orrs	r1, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022c2:	06d2      	lsls	r2, r2, #27
 80022c4:	430a      	orrs	r2, r1
 80022c6:	4947      	ldr	r1, [pc, #284]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022cc:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a44      	ldr	r2, [pc, #272]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 80022d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022d8:	4b42      	ldr	r3, [pc, #264]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a41      	ldr	r2, [pc, #260]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff fa1a 	bl	800171c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff fa16 	bl	800171c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e06e      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x530>
 800230a:	e066      	b.n	80023da <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 8002312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002316:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a31      	ldr	r2, [pc, #196]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a2e      	ldr	r2, [pc, #184]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 800232a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff f9f2 	bl	800171c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff f9ee 	bl	800171c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e046      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234e:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x580>
 800235a:	e03e      	b.n	80023da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e039      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002368:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_RCC_OscConfig+0x628>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f003 0203 	and.w	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	429a      	cmp	r2, r3
 800237a:	d12c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	3b01      	subs	r3, #1
 8002388:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d123      	bne.n	80023d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d11b      	bne.n	80023d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d113      	bne.n	80023d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	3b01      	subs	r3, #1
 80023bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	3b01      	subs	r3, #1
 80023d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	019f800c 	.word	0x019f800c

080023ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e11e      	b.n	8002642 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b91      	ldr	r3, [pc, #580]	; (800264c <HAL_RCC_ClockConfig+0x260>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d910      	bls.n	8002434 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b8e      	ldr	r3, [pc, #568]	; (800264c <HAL_RCC_ClockConfig+0x260>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 020f 	bic.w	r2, r3, #15
 800241a:	498c      	ldr	r1, [pc, #560]	; (800264c <HAL_RCC_ClockConfig+0x260>)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b8a      	ldr	r3, [pc, #552]	; (800264c <HAL_RCC_ClockConfig+0x260>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e106      	b.n	8002642 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d073      	beq.n	8002528 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d129      	bne.n	800249c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002448:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0f4      	b.n	8002642 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002458:	f000 f99e 	bl	8002798 <RCC_GetSysClockFreqFromPLLSource>
 800245c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4a7c      	ldr	r2, [pc, #496]	; (8002654 <HAL_RCC_ClockConfig+0x268>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d93f      	bls.n	80024e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002466:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800247a:	2b00      	cmp	r3, #0
 800247c:	d033      	beq.n	80024e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002482:	2b00      	cmp	r3, #0
 8002484:	d12f      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002486:	4b72      	ldr	r3, [pc, #456]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800248e:	4a70      	ldr	r2, [pc, #448]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002494:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e024      	b.n	80024e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0c6      	b.n	8002642 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b4:	4b66      	ldr	r3, [pc, #408]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0be      	b.n	8002642 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80024c4:	f000 f8ce 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4a61      	ldr	r2, [pc, #388]	; (8002654 <HAL_RCC_ClockConfig+0x268>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d909      	bls.n	80024e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024da:	4a5d      	ldr	r2, [pc, #372]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 80024dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4b5a      	ldr	r3, [pc, #360]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 0203 	bic.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4957      	ldr	r1, [pc, #348]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f8:	f7ff f910 	bl	800171c <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7ff f90c 	bl	800171c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e095      	b.n	8002642 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b4e      	ldr	r3, [pc, #312]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 020c 	and.w	r2, r3, #12
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1eb      	bne.n	8002500 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d023      	beq.n	800257c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002540:	4b43      	ldr	r3, [pc, #268]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a42      	ldr	r2, [pc, #264]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800254a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002558:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002560:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b39      	ldr	r3, [pc, #228]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4936      	ldr	r1, [pc, #216]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
 800257a:	e008      	b.n	800258e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b80      	cmp	r3, #128	; 0x80
 8002580:	d105      	bne.n	800258e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002582:	4b33      	ldr	r3, [pc, #204]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4a32      	ldr	r2, [pc, #200]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800258c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_RCC_ClockConfig+0x260>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d21d      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259c:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_ClockConfig+0x260>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 020f 	bic.w	r2, r3, #15
 80025a4:	4929      	ldr	r1, [pc, #164]	; (800264c <HAL_RCC_ClockConfig+0x260>)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025ac:	f7ff f8b6 	bl	800171c <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7ff f8b2 	bl	800171c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e03b      	b.n	8002642 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_RCC_ClockConfig+0x260>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1ed      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e4:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4917      	ldr	r1, [pc, #92]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	490f      	ldr	r1, [pc, #60]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002616:	f000 f825 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 800261a:	4602      	mov	r2, r0
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <HAL_RCC_ClockConfig+0x264>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	490c      	ldr	r1, [pc, #48]	; (8002658 <HAL_RCC_ClockConfig+0x26c>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	fa22 f303 	lsr.w	r3, r2, r3
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x270>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_RCC_ClockConfig+0x274>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f822 	bl	8001684 <HAL_InitTick>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40022000 	.word	0x40022000
 8002650:	40021000 	.word	0x40021000
 8002654:	04c4b400 	.word	0x04c4b400
 8002658:	08004a74 	.word	0x08004a74
 800265c:	20000000 	.word	0x20000000
 8002660:	20000004 	.word	0x20000004

08002664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800266a:	4b2c      	ldr	r3, [pc, #176]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b04      	cmp	r3, #4
 8002674:	d102      	bne.n	800267c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	e047      	b.n	800270c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b08      	cmp	r3, #8
 8002686:	d102      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002688:	4b26      	ldr	r3, [pc, #152]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc0>)
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e03e      	b.n	800270c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800268e:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d136      	bne.n	8002708 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3301      	adds	r3, #1
 80026b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b8:	4a1a      	ldr	r2, [pc, #104]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
      break;
 80026d0:	e00c      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
      break;
 80026ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	e001      	b.n	800270c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800270c:	693b      	ldr	r3, [r7, #16]
}
 800270e:	4618      	mov	r0, r3
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	00f42400 	.word	0x00f42400
 8002724:	007a1200 	.word	0x007a1200

08002728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_GetHCLKFreq+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000000 	.word	0x20000000

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002744:	f7ff fff0 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4904      	ldr	r1, [pc, #16]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	08004a84 	.word	0x08004a84

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002770:	f7ff ffda 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0adb      	lsrs	r3, r3, #11
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	08004a84 	.word	0x08004a84

08002798 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3301      	adds	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d10c      	bne.n	80027d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027bc:	4a17      	ldr	r2, [pc, #92]	; (800281c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027c6:	68d2      	ldr	r2, [r2, #12]
 80027c8:	0a12      	lsrs	r2, r2, #8
 80027ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027ce:	fb02 f303 	mul.w	r3, r2, r3
 80027d2:	617b      	str	r3, [r7, #20]
    break;
 80027d4:	e00c      	b.n	80027f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	0a12      	lsrs	r2, r2, #8
 80027e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    break;
 80027ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0e5b      	lsrs	r3, r3, #25
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	3301      	adds	r3, #1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800280a:	687b      	ldr	r3, [r7, #4]
}
 800280c:	4618      	mov	r0, r3
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40021000 	.word	0x40021000
 800281c:	007a1200 	.word	0x007a1200
 8002820:	00f42400 	.word	0x00f42400

08002824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800282c:	2300      	movs	r3, #0
 800282e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002830:	2300      	movs	r3, #0
 8002832:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8098 	beq.w	8002972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002846:	4b43      	ldr	r3, [pc, #268]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10d      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	4b40      	ldr	r3, [pc, #256]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	4a3f      	ldr	r2, [pc, #252]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6593      	str	r3, [r2, #88]	; 0x58
 800285e:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286a:	2301      	movs	r3, #1
 800286c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800286e:	4b3a      	ldr	r3, [pc, #232]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a39      	ldr	r2, [pc, #228]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800287a:	f7fe ff4f 	bl	800171c <HAL_GetTick>
 800287e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002880:	e009      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7fe ff4b 	bl	800171c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d902      	bls.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	74fb      	strb	r3, [r7, #19]
        break;
 8002894:	e005      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002896:	4b30      	ldr	r3, [pc, #192]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ef      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d159      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028a8:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01e      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d019      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028c4:	4b23      	ldr	r3, [pc, #140]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028d0:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe ff0b 	bl	800171c <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002908:	e00b      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe ff07 	bl	800171c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d902      	bls.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	74fb      	strb	r3, [r7, #19]
            break;
 8002920:	e006      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ec      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10b      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800294c:	e008      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	74bb      	strb	r3, [r7, #18]
 8002952:	e005      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002954:	40021000 	.word	0x40021000
 8002958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002960:	7c7b      	ldrb	r3, [r7, #17]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002966:	4ba6      	ldr	r3, [pc, #664]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	4aa5      	ldr	r2, [pc, #660]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002970:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800297e:	4ba0      	ldr	r3, [pc, #640]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f023 0203 	bic.w	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	499c      	ldr	r1, [pc, #624]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029a0:	4b97      	ldr	r3, [pc, #604]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f023 020c 	bic.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	4994      	ldr	r1, [pc, #592]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029c2:	4b8f      	ldr	r3, [pc, #572]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	498b      	ldr	r1, [pc, #556]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029e4:	4b86      	ldr	r3, [pc, #536]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	4983      	ldr	r1, [pc, #524]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a06:	4b7e      	ldr	r3, [pc, #504]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	497a      	ldr	r1, [pc, #488]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a28:	4b75      	ldr	r3, [pc, #468]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4972      	ldr	r1, [pc, #456]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a4a:	4b6d      	ldr	r3, [pc, #436]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4969      	ldr	r1, [pc, #420]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a6c:	4b64      	ldr	r3, [pc, #400]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4961      	ldr	r1, [pc, #388]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8e:	4b5c      	ldr	r3, [pc, #368]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	4958      	ldr	r1, [pc, #352]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	4950      	ldr	r1, [pc, #320]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ace:	d105      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae8:	4b45      	ldr	r3, [pc, #276]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	4942      	ldr	r1, [pc, #264]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b06:	d105      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b08:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a3c      	ldr	r2, [pc, #240]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b20:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4934      	ldr	r1, [pc, #208]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a2e      	ldr	r2, [pc, #184]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	4926      	ldr	r1, [pc, #152]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b76:	d105      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b78:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a20      	ldr	r2, [pc, #128]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	4918      	ldr	r1, [pc, #96]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bae:	d105      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d015      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	490a      	ldr	r1, [pc, #40]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000

08002c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e09d      	b.n	8002d52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c26:	d009      	beq.n	8002c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
 8002c2e:	e005      	b.n	8002c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fbc6 	bl	80013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c7c:	d902      	bls.n	8002c84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e002      	b.n	8002c8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c92:	d007      	beq.n	8002ca4 <HAL_SPI_Init+0xa0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c9c:	d002      	beq.n	8002ca4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	ea42 0103 	orr.w	r1, r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	0c1b      	lsrs	r3, r3, #16
 8002d00:	f003 0204 	and.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d20:	ea42 0103 	orr.w	r1, r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b088      	sub	sp, #32
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_SPI_Transmit+0x22>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e158      	b.n	800302e <HAL_SPI_Transmit+0x2d4>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d84:	f7fe fcca 	bl	800171c <HAL_GetTick>
 8002d88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d002      	beq.n	8002da0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d9e:	e13d      	b.n	800301c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_SPI_Transmit+0x52>
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002db0:	e134      	b.n	800301c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2203      	movs	r2, #3
 8002db6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfc:	d10f      	bne.n	8002e1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d007      	beq.n	8002e3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e44:	d94b      	bls.n	8002ede <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_Transmit+0xfa>
 8002e4e:	8afb      	ldrh	r3, [r7, #22]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d13e      	bne.n	8002ed2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	881a      	ldrh	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	1c9a      	adds	r2, r3, #2
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e78:	e02b      	b.n	8002ed2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d112      	bne.n	8002eae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	881a      	ldrh	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	1c9a      	adds	r2, r3, #2
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eac:	e011      	b.n	8002ed2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eae:	f7fe fc35 	bl	800171c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d803      	bhi.n	8002ec6 <HAL_SPI_Transmit+0x16c>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d102      	bne.n	8002ecc <HAL_SPI_Transmit+0x172>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ed0:	e0a4      	b.n	800301c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ce      	bne.n	8002e7a <HAL_SPI_Transmit+0x120>
 8002edc:	e07c      	b.n	8002fd8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_SPI_Transmit+0x192>
 8002ee6:	8afb      	ldrh	r3, [r7, #22]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d170      	bne.n	8002fce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d912      	bls.n	8002f1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	881a      	ldrh	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	1c9a      	adds	r2, r3, #2
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b02      	subs	r3, #2
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f1a:	e058      	b.n	8002fce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	7812      	ldrb	r2, [r2, #0]
 8002f28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f42:	e044      	b.n	8002fce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d12b      	bne.n	8002faa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d912      	bls.n	8002f82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b02      	subs	r3, #2
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f80:	e025      	b.n	8002fce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	7812      	ldrb	r2, [r2, #0]
 8002f8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fa8:	e011      	b.n	8002fce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002faa:	f7fe fbb7 	bl	800171c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d803      	bhi.n	8002fc2 <HAL_SPI_Transmit+0x268>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d102      	bne.n	8002fc8 <HAL_SPI_Transmit+0x26e>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fcc:	e026      	b.n	800301c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1b5      	bne.n	8002f44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	6839      	ldr	r1, [r7, #0]
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 fce3 	bl	80039a8 <SPI_EndRxTxTransaction>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e000      	b.n	800301c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800301a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800302c:	7ffb      	ldrb	r3, [r7, #31]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b088      	sub	sp, #32
 800303a:	af02      	add	r7, sp, #8
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003052:	d112      	bne.n	800307a <HAL_SPI_Receive+0x44>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10e      	bne.n	800307a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2204      	movs	r2, #4
 8003060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003064:	88fa      	ldrh	r2, [r7, #6]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f910 	bl	8003296 <HAL_SPI_TransmitReceive>
 8003076:	4603      	mov	r3, r0
 8003078:	e109      	b.n	800328e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_SPI_Receive+0x52>
 8003084:	2302      	movs	r3, #2
 8003086:	e102      	b.n	800328e <HAL_SPI_Receive+0x258>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003090:	f7fe fb44 	bl	800171c <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d002      	beq.n	80030a8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030a6:	e0e9      	b.n	800327c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_SPI_Receive+0x7e>
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030b8:	e0e0      	b.n	800327c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2204      	movs	r2, #4
 80030be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	88fa      	ldrh	r2, [r7, #6]
 80030d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	88fa      	ldrh	r2, [r7, #6]
 80030da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003104:	d908      	bls.n	8003118 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	e007      	b.n	8003128 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003126:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003130:	d10f      	bne.n	8003152 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003140:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003150:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d007      	beq.n	8003170 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800316e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003178:	d867      	bhi.n	800324a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800317a:	e030      	b.n	80031de <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d117      	bne.n	80031ba <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f103 020c 	add.w	r2, r3, #12
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80031b8:	e011      	b.n	80031de <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ba:	f7fe faaf 	bl	800171c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d803      	bhi.n	80031d2 <HAL_SPI_Receive+0x19c>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d102      	bne.n	80031d8 <HAL_SPI_Receive+0x1a2>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031dc:	e04e      	b.n	800327c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1c8      	bne.n	800317c <HAL_SPI_Receive+0x146>
 80031ea:	e034      	b.n	8003256 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d115      	bne.n	8003226 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	b292      	uxth	r2, r2
 8003206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	1c9a      	adds	r2, r3, #2
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003224:	e011      	b.n	800324a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003226:	f7fe fa79 	bl	800171c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d803      	bhi.n	800323e <HAL_SPI_Receive+0x208>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d102      	bne.n	8003244 <HAL_SPI_Receive+0x20e>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003248:	e018      	b.n	800327c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1ca      	bne.n	80031ec <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	6839      	ldr	r1, [r7, #0]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fb4c 	bl	80038f8 <SPI_EndRxTransaction>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	75fb      	strb	r3, [r7, #23]
 8003278:	e000      	b.n	800327c <HAL_SPI_Receive+0x246>
  }

error :
 800327a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b08a      	sub	sp, #40	; 0x28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032a4:	2301      	movs	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x26>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e1fb      	b.n	80036b4 <HAL_SPI_TransmitReceive+0x41e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032c4:	f7fe fa2a 	bl	800171c <HAL_GetTick>
 80032c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80032dc:	887b      	ldrh	r3, [r7, #2]
 80032de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032e0:	7efb      	ldrb	r3, [r7, #27]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d00e      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x6e>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ec:	d106      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x66>
 80032f6:	7efb      	ldrb	r3, [r7, #27]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d003      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003302:	e1cd      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_SPI_TransmitReceive+0x80>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_SPI_TransmitReceive+0x80>
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800331c:	e1c0      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b04      	cmp	r3, #4
 8003328:	d003      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2205      	movs	r2, #5
 800332e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	887a      	ldrh	r2, [r7, #2]
 8003342:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	887a      	ldrh	r2, [r7, #2]
 800334a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	887a      	ldrh	r2, [r7, #2]
 800335e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003374:	d802      	bhi.n	800337c <HAL_SPI_TransmitReceive+0xe6>
 8003376:	8a3b      	ldrh	r3, [r7, #16]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d908      	bls.n	800338e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	e007      	b.n	800339e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800339c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d007      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033c4:	d97c      	bls.n	80034c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x13e>
 80033ce:	8a7b      	ldrh	r3, [r7, #18]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d169      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033f8:	e056      	b.n	80034a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d11b      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x1aa>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <HAL_SPI_TransmitReceive+0x1aa>
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	2b01      	cmp	r3, #1
 8003416:	d113      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	881a      	ldrh	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	1c9a      	adds	r2, r3, #2
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d11c      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x1f2>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	b292      	uxth	r2, r2
 8003466:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	1c9a      	adds	r2, r3, #2
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003484:	2301      	movs	r3, #1
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003488:	f7fe f948 	bl	800171c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003494:	429a      	cmp	r2, r3
 8003496:	d807      	bhi.n	80034a8 <HAL_SPI_TransmitReceive+0x212>
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349e:	d003      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80034a6:	e0fb      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1a3      	bne.n	80033fa <HAL_SPI_TransmitReceive+0x164>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d19d      	bne.n	80033fa <HAL_SPI_TransmitReceive+0x164>
 80034be:	e0df      	b.n	8003680 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x23a>
 80034c8:	8a7b      	ldrh	r3, [r7, #18]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	f040 80cb 	bne.w	8003666 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d912      	bls.n	8003500 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	881a      	ldrh	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	1c9a      	adds	r2, r3, #2
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b02      	subs	r3, #2
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034fe:	e0b2      	b.n	8003666 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003526:	e09e      	b.n	8003666 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b02      	cmp	r3, #2
 8003534:	d134      	bne.n	80035a0 <HAL_SPI_TransmitReceive+0x30a>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d02f      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0x30a>
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	2b01      	cmp	r3, #1
 8003544:	d12c      	bne.n	80035a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d912      	bls.n	8003576 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	881a      	ldrh	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	1c9a      	adds	r2, r3, #2
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b02      	subs	r3, #2
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003574:	e012      	b.n	800359c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	330c      	adds	r3, #12
 8003580:	7812      	ldrb	r2, [r2, #0]
 8003582:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d148      	bne.n	8003640 <HAL_SPI_TransmitReceive+0x3aa>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d042      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d923      	bls.n	800360e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	b292      	uxth	r2, r2
 80035d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	1c9a      	adds	r2, r3, #2
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b02      	subs	r3, #2
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d81f      	bhi.n	800363c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	e016      	b.n	800363c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f103 020c 	add.w	r2, r3, #12
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800363c:	2301      	movs	r3, #1
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003640:	f7fe f86c 	bl	800171c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364c:	429a      	cmp	r2, r3
 800364e:	d803      	bhi.n	8003658 <HAL_SPI_TransmitReceive+0x3c2>
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d102      	bne.n	800365e <HAL_SPI_TransmitReceive+0x3c8>
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003664:	e01c      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	f47f af5b 	bne.w	8003528 <HAL_SPI_TransmitReceive+0x292>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	f47f af54 	bne.w	8003528 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f98f 	bl	80039a8 <SPI_EndRxTxTransaction>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d006      	beq.n	800369e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	661a      	str	r2, [r3, #96]	; 0x60
 800369c:	e000      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800369e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3728      	adds	r7, #40	; 0x28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036cc:	f7fe f826 	bl	800171c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036dc:	f7fe f81e 	bl	800171c <HAL_GetTick>
 80036e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	0d1b      	lsrs	r3, r3, #20
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f2:	e054      	b.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fa:	d050      	beq.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036fc:	f7fe f80e 	bl	800171c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	429a      	cmp	r2, r3
 800370a:	d902      	bls.n	8003712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d13d      	bne.n	800378e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372a:	d111      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003734:	d004      	beq.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d107      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003758:	d10f      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e017      	b.n	80037be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3b01      	subs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d19b      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000000 	.word	0x20000000

080037cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037de:	f7fd ff9d 	bl	800171c <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037ee:	f7fd ff95 	bl	800171c <HAL_GetTick>
 80037f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037fc:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00da      	lsls	r2, r3, #3
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	0d1b      	lsrs	r3, r3, #20
 800380c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003814:	e060      	b.n	80038d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800381c:	d107      	bne.n	800382e <SPI_WaitFifoStateUntilTimeout+0x62>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800382c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d050      	beq.n	80038d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003836:	f7fd ff71 	bl	800171c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003842:	429a      	cmp	r2, r3
 8003844:	d902      	bls.n	800384c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	2b00      	cmp	r3, #0
 800384a:	d13d      	bne.n	80038c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800385a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003864:	d111      	bne.n	800388a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386e:	d004      	beq.n	800387a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003878:	d107      	bne.n	800388a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003888:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003892:	d10f      	bne.n	80038b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e010      	b.n	80038ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d196      	bne.n	8003816 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800390c:	d111      	bne.n	8003932 <SPI_EndRxTransaction+0x3a>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003916:	d004      	beq.n	8003922 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003920:	d107      	bne.n	8003932 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003930:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2200      	movs	r2, #0
 800393a:	2180      	movs	r1, #128	; 0x80
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f7ff febd 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394c:	f043 0220 	orr.w	r2, r3, #32
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e023      	b.n	80039a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003960:	d11d      	bne.n	800399e <SPI_EndRxTransaction+0xa6>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396a:	d004      	beq.n	8003976 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003974:	d113      	bne.n	800399e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2200      	movs	r2, #0
 800397e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f7ff ff22 	bl	80037cc <SPI_WaitFifoStateUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e000      	b.n	80039a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff ff03 	bl	80037cc <SPI_WaitFifoStateUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e027      	b.n	8003a2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2200      	movs	r2, #0
 80039e4:	2180      	movs	r1, #128	; 0x80
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f7ff fe68 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f6:	f043 0220 	orr.w	r2, r3, #32
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e014      	b.n	8003a2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f7ff fedc 	bl	80037cc <SPI_WaitFifoStateUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e000      	b.n	8003a2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e042      	b.n	8003acc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7fd fd07 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2224      	movs	r2, #36	; 0x24
 8003a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f82c 	bl	8003ad4 <UART_SetConfig>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e022      	b.n	8003acc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 faec 	bl	800406c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ab2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fb73 	bl	80041b0 <UART_CheckIdleState>
 8003aca:	4603      	mov	r3, r0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad8:	b08c      	sub	sp, #48	; 0x30
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4bab      	ldr	r3, [pc, #684]	; (8003db0 <UART_SetConfig+0x2dc>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4aa0      	ldr	r2, [pc, #640]	; (8003db4 <UART_SetConfig+0x2e0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	f023 010f 	bic.w	r1, r3, #15
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a91      	ldr	r2, [pc, #580]	; (8003db8 <UART_SetConfig+0x2e4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d125      	bne.n	8003bc4 <UART_SetConfig+0xf0>
 8003b78:	4b90      	ldr	r3, [pc, #576]	; (8003dbc <UART_SetConfig+0x2e8>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d81a      	bhi.n	8003bbc <UART_SetConfig+0xe8>
 8003b86:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <UART_SetConfig+0xb8>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003b9d 	.word	0x08003b9d
 8003b90:	08003bad 	.word	0x08003bad
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bb5 	.word	0x08003bb5
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba2:	e0d6      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003baa:	e0d2      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003bac:	2304      	movs	r3, #4
 8003bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb2:	e0ce      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003bb4:	2308      	movs	r3, #8
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bba:	e0ca      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc2:	e0c6      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a7d      	ldr	r2, [pc, #500]	; (8003dc0 <UART_SetConfig+0x2ec>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d138      	bne.n	8003c40 <UART_SetConfig+0x16c>
 8003bce:	4b7b      	ldr	r3, [pc, #492]	; (8003dbc <UART_SetConfig+0x2e8>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	d82d      	bhi.n	8003c38 <UART_SetConfig+0x164>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <UART_SetConfig+0x110>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c19 	.word	0x08003c19
 8003be8:	08003c39 	.word	0x08003c39
 8003bec:	08003c39 	.word	0x08003c39
 8003bf0:	08003c39 	.word	0x08003c39
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003c39 	.word	0x08003c39
 8003bfc:	08003c39 	.word	0x08003c39
 8003c00:	08003c39 	.word	0x08003c39
 8003c04:	08003c21 	.word	0x08003c21
 8003c08:	08003c39 	.word	0x08003c39
 8003c0c:	08003c39 	.word	0x08003c39
 8003c10:	08003c39 	.word	0x08003c39
 8003c14:	08003c31 	.word	0x08003c31
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	e098      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e094      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	e090      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003c30:	2308      	movs	r3, #8
 8003c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c36:	e08c      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c3e:	e088      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a5f      	ldr	r2, [pc, #380]	; (8003dc4 <UART_SetConfig+0x2f0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d125      	bne.n	8003c96 <UART_SetConfig+0x1c2>
 8003c4a:	4b5c      	ldr	r3, [pc, #368]	; (8003dbc <UART_SetConfig+0x2e8>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c54:	2b30      	cmp	r3, #48	; 0x30
 8003c56:	d016      	beq.n	8003c86 <UART_SetConfig+0x1b2>
 8003c58:	2b30      	cmp	r3, #48	; 0x30
 8003c5a:	d818      	bhi.n	8003c8e <UART_SetConfig+0x1ba>
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d00a      	beq.n	8003c76 <UART_SetConfig+0x1a2>
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d814      	bhi.n	8003c8e <UART_SetConfig+0x1ba>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <UART_SetConfig+0x19a>
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d008      	beq.n	8003c7e <UART_SetConfig+0x1aa>
 8003c6c:	e00f      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c74:	e06d      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003c76:	2302      	movs	r3, #2
 8003c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7c:	e069      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003c7e:	2304      	movs	r3, #4
 8003c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c84:	e065      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003c86:	2308      	movs	r3, #8
 8003c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8c:	e061      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003c8e:	2310      	movs	r3, #16
 8003c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c94:	e05d      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a4b      	ldr	r2, [pc, #300]	; (8003dc8 <UART_SetConfig+0x2f4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d125      	bne.n	8003cec <UART_SetConfig+0x218>
 8003ca0:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <UART_SetConfig+0x2e8>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003caa:	2bc0      	cmp	r3, #192	; 0xc0
 8003cac:	d016      	beq.n	8003cdc <UART_SetConfig+0x208>
 8003cae:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb0:	d818      	bhi.n	8003ce4 <UART_SetConfig+0x210>
 8003cb2:	2b80      	cmp	r3, #128	; 0x80
 8003cb4:	d00a      	beq.n	8003ccc <UART_SetConfig+0x1f8>
 8003cb6:	2b80      	cmp	r3, #128	; 0x80
 8003cb8:	d814      	bhi.n	8003ce4 <UART_SetConfig+0x210>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <UART_SetConfig+0x1f0>
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d008      	beq.n	8003cd4 <UART_SetConfig+0x200>
 8003cc2:	e00f      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cca:	e042      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd2:	e03e      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cda:	e03a      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce2:	e036      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cea:	e032      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a30      	ldr	r2, [pc, #192]	; (8003db4 <UART_SetConfig+0x2e0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d12a      	bne.n	8003d4c <UART_SetConfig+0x278>
 8003cf6:	4b31      	ldr	r3, [pc, #196]	; (8003dbc <UART_SetConfig+0x2e8>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d04:	d01a      	beq.n	8003d3c <UART_SetConfig+0x268>
 8003d06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d0a:	d81b      	bhi.n	8003d44 <UART_SetConfig+0x270>
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d10:	d00c      	beq.n	8003d2c <UART_SetConfig+0x258>
 8003d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d16:	d815      	bhi.n	8003d44 <UART_SetConfig+0x270>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <UART_SetConfig+0x250>
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d008      	beq.n	8003d34 <UART_SetConfig+0x260>
 8003d22:	e00f      	b.n	8003d44 <UART_SetConfig+0x270>
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2a:	e012      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d32:	e00e      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003d34:	2304      	movs	r3, #4
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3a:	e00a      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d42:	e006      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003d44:	2310      	movs	r3, #16
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4a:	e002      	b.n	8003d52 <UART_SetConfig+0x27e>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <UART_SetConfig+0x2e0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	f040 80a8 	bne.w	8003eae <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d834      	bhi.n	8003dd0 <UART_SetConfig+0x2fc>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0x298>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003dd1 	.word	0x08003dd1
 8003d74:	08003d99 	.word	0x08003d99
 8003d78:	08003dd1 	.word	0x08003dd1
 8003d7c:	08003d9f 	.word	0x08003d9f
 8003d80:	08003dd1 	.word	0x08003dd1
 8003d84:	08003dd1 	.word	0x08003dd1
 8003d88:	08003dd1 	.word	0x08003dd1
 8003d8c:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7fe fcd6 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 8003d94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d96:	e021      	b.n	8003ddc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <UART_SetConfig+0x2f8>)
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d9c:	e01e      	b.n	8003ddc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe fc61 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8003da2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003da4:	e01a      	b.n	8003ddc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dac:	e016      	b.n	8003ddc <UART_SetConfig+0x308>
 8003dae:	bf00      	nop
 8003db0:	cfff69f3 	.word	0xcfff69f3
 8003db4:	40008000 	.word	0x40008000
 8003db8:	40013800 	.word	0x40013800
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40004400 	.word	0x40004400
 8003dc4:	40004800 	.word	0x40004800
 8003dc8:	40004c00 	.word	0x40004c00
 8003dcc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003dda:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 812a 	beq.w	8004038 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	4a9e      	ldr	r2, [pc, #632]	; (8004064 <UART_SetConfig+0x590>)
 8003dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dee:	461a      	mov	r2, r3
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d305      	bcc.n	8003e14 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d903      	bls.n	8003e1c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e1a:	e10d      	b.n	8004038 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	2200      	movs	r2, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	60fa      	str	r2, [r7, #12]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	4a8e      	ldr	r2, [pc, #568]	; (8004064 <UART_SetConfig+0x590>)
 8003e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2200      	movs	r2, #0
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e3e:	f7fc f9eb 	bl	8000218 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	020b      	lsls	r3, r1, #8
 8003e54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e58:	0202      	lsls	r2, r0, #8
 8003e5a:	6979      	ldr	r1, [r7, #20]
 8003e5c:	6849      	ldr	r1, [r1, #4]
 8003e5e:	0849      	lsrs	r1, r1, #1
 8003e60:	2000      	movs	r0, #0
 8003e62:	460c      	mov	r4, r1
 8003e64:	4605      	mov	r5, r0
 8003e66:	eb12 0804 	adds.w	r8, r2, r4
 8003e6a:	eb43 0905 	adc.w	r9, r3, r5
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	469a      	mov	sl, r3
 8003e76:	4693      	mov	fp, r2
 8003e78:	4652      	mov	r2, sl
 8003e7a:	465b      	mov	r3, fp
 8003e7c:	4640      	mov	r0, r8
 8003e7e:	4649      	mov	r1, r9
 8003e80:	f7fc f9ca 	bl	8000218 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4613      	mov	r3, r2
 8003e8a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e92:	d308      	bcc.n	8003ea6 <UART_SetConfig+0x3d2>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e9a:	d204      	bcs.n	8003ea6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	e0c8      	b.n	8004038 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003eac:	e0c4      	b.n	8004038 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb6:	d167      	bne.n	8003f88 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d828      	bhi.n	8003f12 <UART_SetConfig+0x43e>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <UART_SetConfig+0x3f4>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	08003f13 	.word	0x08003f13
 8003ed8:	08003f03 	.word	0x08003f03
 8003edc:	08003f13 	.word	0x08003f13
 8003ee0:	08003f13 	.word	0x08003f13
 8003ee4:	08003f13 	.word	0x08003f13
 8003ee8:	08003f0b 	.word	0x08003f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eec:	f7fe fc28 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ef2:	e014      	b.n	8003f1e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7fe fc3a 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8003ef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003efa:	e010      	b.n	8003f1e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003efc:	4b5a      	ldr	r3, [pc, #360]	; (8004068 <UART_SetConfig+0x594>)
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f00:	e00d      	b.n	8003f1e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f02:	f7fe fbaf 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8003f06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f08:	e009      	b.n	8003f1e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f10:	e005      	b.n	8003f1e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8089 	beq.w	8004038 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	4a4e      	ldr	r2, [pc, #312]	; (8004064 <UART_SetConfig+0x590>)
 8003f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f30:	461a      	mov	r2, r3
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f38:	005a      	lsls	r2, r3, #1
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	441a      	add	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	d916      	bls.n	8003f80 <UART_SetConfig+0x4ac>
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d212      	bcs.n	8003f80 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f023 030f 	bic.w	r3, r3, #15
 8003f62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	8bfb      	ldrh	r3, [r7, #30]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	8bfa      	ldrh	r2, [r7, #30]
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	e05b      	b.n	8004038 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f86:	e057      	b.n	8004038 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d828      	bhi.n	8003fe2 <UART_SetConfig+0x50e>
 8003f90:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x4c4>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003fd3 	.word	0x08003fd3
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fe3 	.word	0x08003fe3
 8003fb4:	08003fe3 	.word	0x08003fe3
 8003fb8:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7fe fbc0 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 8003fc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fc2:	e014      	b.n	8003fee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7fe fbd2 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8003fc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fca:	e010      	b.n	8003fee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b26      	ldr	r3, [pc, #152]	; (8004068 <UART_SetConfig+0x594>)
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fd0:	e00d      	b.n	8003fee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7fe fb47 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8003fd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fd8:	e009      	b.n	8003fee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fe0:	e005      	b.n	8003fee <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fec:	bf00      	nop
    }

    if (pclk != 0U)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d021      	beq.n	8004038 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	4a1a      	ldr	r2, [pc, #104]	; (8004064 <UART_SetConfig+0x590>)
 8003ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ffe:	461a      	mov	r2, r3
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	fbb3 f2f2 	udiv	r2, r3, r2
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	441a      	add	r2, r3
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	2b0f      	cmp	r3, #15
 800401c:	d909      	bls.n	8004032 <UART_SetConfig+0x55e>
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004024:	d205      	bcs.n	8004032 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	b29a      	uxth	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60da      	str	r2, [r3, #12]
 8004030:	e002      	b.n	8004038 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2201      	movs	r2, #1
 800403c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2201      	movs	r2, #1
 8004044:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2200      	movs	r2, #0
 800404c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2200      	movs	r2, #0
 8004052:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004054:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004058:	4618      	mov	r0, r3
 800405a:	3730      	adds	r7, #48	; 0x30
 800405c:	46bd      	mov	sp, r7
 800405e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004062:	bf00      	nop
 8004064:	08004a8c 	.word	0x08004a8c
 8004068:	00f42400 	.word	0x00f42400

0800406c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01a      	beq.n	8004182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800416a:	d10a      	bne.n	8004182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041c0:	f7fd faac 	bl	800171c <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d10e      	bne.n	80041f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f82f 	bl	8004246 <UART_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e025      	b.n	800423e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d10e      	bne.n	800421e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f819 	bl	8004246 <UART_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e00f      	b.n	800423e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b09c      	sub	sp, #112	; 0x70
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	4613      	mov	r3, r2
 8004254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004256:	e0a9      	b.n	80043ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	f000 80a5 	beq.w	80043ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004262:	f7fd fa5b 	bl	800171c <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <UART_WaitOnFlagUntilTimeout+0x32>
 8004272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004274:	2b00      	cmp	r3, #0
 8004276:	d140      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800428c:	667b      	str	r3, [r7, #100]	; 0x64
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004298:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800429c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e6      	bne.n	8004278 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3308      	adds	r3, #8
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	663b      	str	r3, [r7, #96]	; 0x60
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3308      	adds	r3, #8
 80042c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80042cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e5      	bne.n	80042aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e069      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d051      	beq.n	80043ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004316:	d149      	bne.n	80043ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004320:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004336:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004340:	637b      	str	r3, [r7, #52]	; 0x34
 8004342:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e6      	bne.n	8004322 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	613b      	str	r3, [r7, #16]
   return(result);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	66bb      	str	r3, [r7, #104]	; 0x68
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3308      	adds	r3, #8
 8004372:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004374:	623a      	str	r2, [r7, #32]
 8004376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	69f9      	ldr	r1, [r7, #28]
 800437a:	6a3a      	ldr	r2, [r7, #32]
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	61bb      	str	r3, [r7, #24]
   return(result);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e010      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4013      	ands	r3, r2
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	461a      	mov	r2, r3
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	f43f af46 	beq.w	8004258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3770      	adds	r7, #112	; 0x70
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_UARTEx_DisableFifoMode+0x16>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e027      	b.n	800443c <HAL_UARTEx_DisableFifoMode+0x66>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	; 0x24
 80043f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800441a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800445c:	2302      	movs	r3, #2
 800445e:	e02d      	b.n	80044bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	; 0x24
 800446c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f84f 	bl	8004540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e02d      	b.n	8004538 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f811 	bl	8004540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454c:	2b00      	cmp	r3, #0
 800454e:	d108      	bne.n	8004562 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004560:	e031      	b.n	80045c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004562:	2308      	movs	r3, #8
 8004564:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004566:	2308      	movs	r3, #8
 8004568:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	0e5b      	lsrs	r3, r3, #25
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	0f5b      	lsrs	r3, r3, #29
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800458a:	7bbb      	ldrb	r3, [r7, #14]
 800458c:	7b3a      	ldrb	r2, [r7, #12]
 800458e:	4911      	ldr	r1, [pc, #68]	; (80045d4 <UARTEx_SetNbDataToProcess+0x94>)
 8004590:	5c8a      	ldrb	r2, [r1, r2]
 8004592:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004596:	7b3a      	ldrb	r2, [r7, #12]
 8004598:	490f      	ldr	r1, [pc, #60]	; (80045d8 <UARTEx_SetNbDataToProcess+0x98>)
 800459a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800459c:	fb93 f3f2 	sdiv	r3, r3, r2
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	7b7a      	ldrb	r2, [r7, #13]
 80045ac:	4909      	ldr	r1, [pc, #36]	; (80045d4 <UARTEx_SetNbDataToProcess+0x94>)
 80045ae:	5c8a      	ldrb	r2, [r1, r2]
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045b4:	7b7a      	ldrb	r2, [r7, #13]
 80045b6:	4908      	ldr	r1, [pc, #32]	; (80045d8 <UARTEx_SetNbDataToProcess+0x98>)
 80045b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	08004aa4 	.word	0x08004aa4
 80045d8:	08004aac 	.word	0x08004aac

080045dc <__errno>:
 80045dc:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <__errno+0x8>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	2000000c 	.word	0x2000000c

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	4d0d      	ldr	r5, [pc, #52]	; (8004620 <__libc_init_array+0x38>)
 80045ec:	4c0d      	ldr	r4, [pc, #52]	; (8004624 <__libc_init_array+0x3c>)
 80045ee:	1b64      	subs	r4, r4, r5
 80045f0:	10a4      	asrs	r4, r4, #2
 80045f2:	2600      	movs	r6, #0
 80045f4:	42a6      	cmp	r6, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	4d0b      	ldr	r5, [pc, #44]	; (8004628 <__libc_init_array+0x40>)
 80045fa:	4c0c      	ldr	r4, [pc, #48]	; (800462c <__libc_init_array+0x44>)
 80045fc:	f000 f92e 	bl	800485c <_init>
 8004600:	1b64      	subs	r4, r4, r5
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	2600      	movs	r6, #0
 8004606:	42a6      	cmp	r6, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004610:	4798      	blx	r3
 8004612:	3601      	adds	r6, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	f855 3b04 	ldr.w	r3, [r5], #4
 800461a:	4798      	blx	r3
 800461c:	3601      	adds	r6, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	08004abc 	.word	0x08004abc
 8004624:	08004abc 	.word	0x08004abc
 8004628:	08004abc 	.word	0x08004abc
 800462c:	08004ac0 	.word	0x08004ac0

08004630 <malloc>:
 8004630:	4b02      	ldr	r3, [pc, #8]	; (800463c <malloc+0xc>)
 8004632:	4601      	mov	r1, r0
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	f000 b87f 	b.w	8004738 <_malloc_r>
 800463a:	bf00      	nop
 800463c:	2000000c 	.word	0x2000000c

08004640 <free>:
 8004640:	4b02      	ldr	r3, [pc, #8]	; (800464c <free+0xc>)
 8004642:	4601      	mov	r1, r0
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	f000 b80b 	b.w	8004660 <_free_r>
 800464a:	bf00      	nop
 800464c:	2000000c 	.word	0x2000000c

08004650 <memset>:
 8004650:	4402      	add	r2, r0
 8004652:	4603      	mov	r3, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <_free_r>:
 8004660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004662:	2900      	cmp	r1, #0
 8004664:	d044      	beq.n	80046f0 <_free_r+0x90>
 8004666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800466a:	9001      	str	r0, [sp, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f1a1 0404 	sub.w	r4, r1, #4
 8004672:	bfb8      	it	lt
 8004674:	18e4      	addlt	r4, r4, r3
 8004676:	f000 f8e3 	bl	8004840 <__malloc_lock>
 800467a:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <_free_r+0x94>)
 800467c:	9801      	ldr	r0, [sp, #4]
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	b933      	cbnz	r3, 8004690 <_free_r+0x30>
 8004682:	6063      	str	r3, [r4, #4]
 8004684:	6014      	str	r4, [r2, #0]
 8004686:	b003      	add	sp, #12
 8004688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800468c:	f000 b8de 	b.w	800484c <__malloc_unlock>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d908      	bls.n	80046a6 <_free_r+0x46>
 8004694:	6825      	ldr	r5, [r4, #0]
 8004696:	1961      	adds	r1, r4, r5
 8004698:	428b      	cmp	r3, r1
 800469a:	bf01      	itttt	eq
 800469c:	6819      	ldreq	r1, [r3, #0]
 800469e:	685b      	ldreq	r3, [r3, #4]
 80046a0:	1949      	addeq	r1, r1, r5
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	e7ed      	b.n	8004682 <_free_r+0x22>
 80046a6:	461a      	mov	r2, r3
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b10b      	cbz	r3, 80046b0 <_free_r+0x50>
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	d9fa      	bls.n	80046a6 <_free_r+0x46>
 80046b0:	6811      	ldr	r1, [r2, #0]
 80046b2:	1855      	adds	r5, r2, r1
 80046b4:	42a5      	cmp	r5, r4
 80046b6:	d10b      	bne.n	80046d0 <_free_r+0x70>
 80046b8:	6824      	ldr	r4, [r4, #0]
 80046ba:	4421      	add	r1, r4
 80046bc:	1854      	adds	r4, r2, r1
 80046be:	42a3      	cmp	r3, r4
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	d1e0      	bne.n	8004686 <_free_r+0x26>
 80046c4:	681c      	ldr	r4, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	6053      	str	r3, [r2, #4]
 80046ca:	4421      	add	r1, r4
 80046cc:	6011      	str	r1, [r2, #0]
 80046ce:	e7da      	b.n	8004686 <_free_r+0x26>
 80046d0:	d902      	bls.n	80046d8 <_free_r+0x78>
 80046d2:	230c      	movs	r3, #12
 80046d4:	6003      	str	r3, [r0, #0]
 80046d6:	e7d6      	b.n	8004686 <_free_r+0x26>
 80046d8:	6825      	ldr	r5, [r4, #0]
 80046da:	1961      	adds	r1, r4, r5
 80046dc:	428b      	cmp	r3, r1
 80046de:	bf04      	itt	eq
 80046e0:	6819      	ldreq	r1, [r3, #0]
 80046e2:	685b      	ldreq	r3, [r3, #4]
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	bf04      	itt	eq
 80046e8:	1949      	addeq	r1, r1, r5
 80046ea:	6021      	streq	r1, [r4, #0]
 80046ec:	6054      	str	r4, [r2, #4]
 80046ee:	e7ca      	b.n	8004686 <_free_r+0x26>
 80046f0:	b003      	add	sp, #12
 80046f2:	bd30      	pop	{r4, r5, pc}
 80046f4:	20000188 	.word	0x20000188

080046f8 <sbrk_aligned>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4e0e      	ldr	r6, [pc, #56]	; (8004734 <sbrk_aligned+0x3c>)
 80046fc:	460c      	mov	r4, r1
 80046fe:	6831      	ldr	r1, [r6, #0]
 8004700:	4605      	mov	r5, r0
 8004702:	b911      	cbnz	r1, 800470a <sbrk_aligned+0x12>
 8004704:	f000 f88c 	bl	8004820 <_sbrk_r>
 8004708:	6030      	str	r0, [r6, #0]
 800470a:	4621      	mov	r1, r4
 800470c:	4628      	mov	r0, r5
 800470e:	f000 f887 	bl	8004820 <_sbrk_r>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d00a      	beq.n	800472c <sbrk_aligned+0x34>
 8004716:	1cc4      	adds	r4, r0, #3
 8004718:	f024 0403 	bic.w	r4, r4, #3
 800471c:	42a0      	cmp	r0, r4
 800471e:	d007      	beq.n	8004730 <sbrk_aligned+0x38>
 8004720:	1a21      	subs	r1, r4, r0
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f87c 	bl	8004820 <_sbrk_r>
 8004728:	3001      	adds	r0, #1
 800472a:	d101      	bne.n	8004730 <sbrk_aligned+0x38>
 800472c:	f04f 34ff 	mov.w	r4, #4294967295
 8004730:	4620      	mov	r0, r4
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	2000018c 	.word	0x2000018c

08004738 <_malloc_r>:
 8004738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473c:	1ccd      	adds	r5, r1, #3
 800473e:	f025 0503 	bic.w	r5, r5, #3
 8004742:	3508      	adds	r5, #8
 8004744:	2d0c      	cmp	r5, #12
 8004746:	bf38      	it	cc
 8004748:	250c      	movcc	r5, #12
 800474a:	2d00      	cmp	r5, #0
 800474c:	4607      	mov	r7, r0
 800474e:	db01      	blt.n	8004754 <_malloc_r+0x1c>
 8004750:	42a9      	cmp	r1, r5
 8004752:	d905      	bls.n	8004760 <_malloc_r+0x28>
 8004754:	230c      	movs	r3, #12
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	2600      	movs	r6, #0
 800475a:	4630      	mov	r0, r6
 800475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004760:	4e2e      	ldr	r6, [pc, #184]	; (800481c <_malloc_r+0xe4>)
 8004762:	f000 f86d 	bl	8004840 <__malloc_lock>
 8004766:	6833      	ldr	r3, [r6, #0]
 8004768:	461c      	mov	r4, r3
 800476a:	bb34      	cbnz	r4, 80047ba <_malloc_r+0x82>
 800476c:	4629      	mov	r1, r5
 800476e:	4638      	mov	r0, r7
 8004770:	f7ff ffc2 	bl	80046f8 <sbrk_aligned>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	4604      	mov	r4, r0
 8004778:	d14d      	bne.n	8004816 <_malloc_r+0xde>
 800477a:	6834      	ldr	r4, [r6, #0]
 800477c:	4626      	mov	r6, r4
 800477e:	2e00      	cmp	r6, #0
 8004780:	d140      	bne.n	8004804 <_malloc_r+0xcc>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	4631      	mov	r1, r6
 8004786:	4638      	mov	r0, r7
 8004788:	eb04 0803 	add.w	r8, r4, r3
 800478c:	f000 f848 	bl	8004820 <_sbrk_r>
 8004790:	4580      	cmp	r8, r0
 8004792:	d13a      	bne.n	800480a <_malloc_r+0xd2>
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	3503      	adds	r5, #3
 8004798:	1a6d      	subs	r5, r5, r1
 800479a:	f025 0503 	bic.w	r5, r5, #3
 800479e:	3508      	adds	r5, #8
 80047a0:	2d0c      	cmp	r5, #12
 80047a2:	bf38      	it	cc
 80047a4:	250c      	movcc	r5, #12
 80047a6:	4629      	mov	r1, r5
 80047a8:	4638      	mov	r0, r7
 80047aa:	f7ff ffa5 	bl	80046f8 <sbrk_aligned>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d02b      	beq.n	800480a <_malloc_r+0xd2>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	442b      	add	r3, r5
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	e00e      	b.n	80047d8 <_malloc_r+0xa0>
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	1b52      	subs	r2, r2, r5
 80047be:	d41e      	bmi.n	80047fe <_malloc_r+0xc6>
 80047c0:	2a0b      	cmp	r2, #11
 80047c2:	d916      	bls.n	80047f2 <_malloc_r+0xba>
 80047c4:	1961      	adds	r1, r4, r5
 80047c6:	42a3      	cmp	r3, r4
 80047c8:	6025      	str	r5, [r4, #0]
 80047ca:	bf18      	it	ne
 80047cc:	6059      	strne	r1, [r3, #4]
 80047ce:	6863      	ldr	r3, [r4, #4]
 80047d0:	bf08      	it	eq
 80047d2:	6031      	streq	r1, [r6, #0]
 80047d4:	5162      	str	r2, [r4, r5]
 80047d6:	604b      	str	r3, [r1, #4]
 80047d8:	4638      	mov	r0, r7
 80047da:	f104 060b 	add.w	r6, r4, #11
 80047de:	f000 f835 	bl	800484c <__malloc_unlock>
 80047e2:	f026 0607 	bic.w	r6, r6, #7
 80047e6:	1d23      	adds	r3, r4, #4
 80047e8:	1af2      	subs	r2, r6, r3
 80047ea:	d0b6      	beq.n	800475a <_malloc_r+0x22>
 80047ec:	1b9b      	subs	r3, r3, r6
 80047ee:	50a3      	str	r3, [r4, r2]
 80047f0:	e7b3      	b.n	800475a <_malloc_r+0x22>
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	bf0c      	ite	eq
 80047f8:	6032      	streq	r2, [r6, #0]
 80047fa:	605a      	strne	r2, [r3, #4]
 80047fc:	e7ec      	b.n	80047d8 <_malloc_r+0xa0>
 80047fe:	4623      	mov	r3, r4
 8004800:	6864      	ldr	r4, [r4, #4]
 8004802:	e7b2      	b.n	800476a <_malloc_r+0x32>
 8004804:	4634      	mov	r4, r6
 8004806:	6876      	ldr	r6, [r6, #4]
 8004808:	e7b9      	b.n	800477e <_malloc_r+0x46>
 800480a:	230c      	movs	r3, #12
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4638      	mov	r0, r7
 8004810:	f000 f81c 	bl	800484c <__malloc_unlock>
 8004814:	e7a1      	b.n	800475a <_malloc_r+0x22>
 8004816:	6025      	str	r5, [r4, #0]
 8004818:	e7de      	b.n	80047d8 <_malloc_r+0xa0>
 800481a:	bf00      	nop
 800481c:	20000188 	.word	0x20000188

08004820 <_sbrk_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d06      	ldr	r5, [pc, #24]	; (800483c <_sbrk_r+0x1c>)
 8004824:	2300      	movs	r3, #0
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	f7fc fea0 	bl	8001570 <_sbrk>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_sbrk_r+0x1a>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b103      	cbz	r3, 800483a <_sbrk_r+0x1a>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	20000190 	.word	0x20000190

08004840 <__malloc_lock>:
 8004840:	4801      	ldr	r0, [pc, #4]	; (8004848 <__malloc_lock+0x8>)
 8004842:	f000 b809 	b.w	8004858 <__retarget_lock_acquire_recursive>
 8004846:	bf00      	nop
 8004848:	20000194 	.word	0x20000194

0800484c <__malloc_unlock>:
 800484c:	4801      	ldr	r0, [pc, #4]	; (8004854 <__malloc_unlock+0x8>)
 800484e:	f000 b804 	b.w	800485a <__retarget_lock_release_recursive>
 8004852:	bf00      	nop
 8004854:	20000194 	.word	0x20000194

08004858 <__retarget_lock_acquire_recursive>:
 8004858:	4770      	bx	lr

0800485a <__retarget_lock_release_recursive>:
 800485a:	4770      	bx	lr

0800485c <_init>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr

08004868 <_fini>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr
